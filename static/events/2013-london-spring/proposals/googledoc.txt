"votes","type","url","author","title","description","voter1"
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/NoSQL/","Tugdual Grall and Robin Jonhson","Why NoSQL Databases are the best for Devops?","Abstract:

Bringing Developers and Operations together helps companies to be more efficient to bring out new apps and services. Devops are using today many tools and technics to achieve continuous integration, deployment and monitoring. In this presentation will see why NoSQL databases are the best for Devops, and this for many reasons:

Schemaless/Flexible schemas allow developers to get back the control of what&rsquo;s going in the application! (Old fashion DBA most of the time do not have enough knowledge of the application to drive the data model!)

Easy Scalability and always on are key! The new database engines are built to scale easily. You can change the topology of your cluster (adding node for example), manage failures and upgrade on a running system with no impact on the running application.

This presentation will use real life use cases to show that NoSQL engine ease the deployment and monitoring of new applications, and also talk about the key things to look when you chose a solution and deploy it.

Speaker:

Tugdual Grall, Technical Evangelist, Couchbase
Tugdual 'Tug' Grall is a Technical Evangelist at Couchbase, an open source advocate and a passionate developer. He currently works with the European developer communities to ease the NoSQL adoption.  Tugdual is contributing to the Java and Node/JavaScript Couchbase SDKs.
Before joining Couchbase Tugdual was CTO of eXo the company behind the revolutionary online development tools Cloud-IDE and the open source social platform eXo Platform. Earlier Tugdual has worked as Product Manager and Developer on the Oracle Middleware focusing on Java EE platform.
Tug has spoken at number of conferences including  DevoxxFR, FOSDEM, Open Source Day Poland, Google I/O, JavaOne and many meetups and user groups. He is co-founder of the Nantes JUG (Java User Group) that holds since 2008 monthly meeting about Java ecosystem. He also writes a blog available at  http://tugdualgrall.blogspot.com and available @tgrall Finally when he finds the time to do it, he develops the site www.resultri.com a Google App Engine based application.

Robin Jonhson, Techical Evangelist, Couchbase
Over the last few years Robin Johnson has been involved in some of the Leading Social Gaming and Betting applications to grace the world wide web.  After bootstrapping an Award-Winning Social Gaming startup, Robin is a seasoned Distributed System and NoSQL advocate.  A polyglot Rubyist and Pythoner all in one, taking on roles from Frontend Developer to Software Engineer and Solutions Architect.
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/WhoYouGonnaCall/","Tom Duckering and Jim Gumbley","Who you gonna call? - getting devs on support","Abstract:

In many traditional software shops developers don't go on the 24/7 rota.
However, the ideas behind DevOps are challenging this assumption. We'll
explain some of the thinking behind the move to having devs on call.
We'll talk about some of the patterns that worked for us and added
value. We'll also highlight some of the roadblocks and pitfalls
encountered in attempts to make this change. Hopefully you'll leave
inspired to try this yourself, equipped to transform support, from being
necessary evil, into a competitive advantage.

Speakers:

Tom Duckering and Jim Gumbley
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/TrucksAndCargo/","Sam Lambert","When your distributed devices are trucks and the cargo is data.","Abstract:

The Smith Link telemetry platform gathers billions of metrics from its trucks globally every day. I will tell you the story of how it&rsquo;s done and the challenges we faced along the way.

My talk will be the story of a system that struggled under the weight of it&rsquo;s own ambition but grew to become a mature, scalable system that could process billions of transactions per day.

The system is the Smith Electric Vehicles Telemetry platform that collects 2,500 data points per second from each of it&rsquo;s electric trucks in real time. These data points include battery charge, truck health status, GPS location, battery status and many many others.

The success of the project has allowed truck R&amp;D teams to monitor their engineering efforts in real time to greatly improve development of the electric vehicle market. Through detailed analysis of truck usage data we have been able to shape the future of sustainable transport and reeducate drivers and evolve human interaction with this new technology.

This high level accessible talk will show attendees how the team used open source technologies such as MySQL, AMQP, C, Python, Memcahed, Linux and PHP to build a scalable, high throughput, large data analytics platform.

During the talk I will answer the following questions;


What are the downsides of a &lsquo;gather everything&rsquo; mentality?
What is the importance of defining your key metrics?
Why decouple your system and isolate moving parts?



and cover the following topics;


Scaling MySQL to quickly report on very high volumes of data
Thinking in message queues and building a data fire hose
Developing a flexible platform for limitless outward scalability
Creating a C based imbedded AMQP device that works on a CAN network



People will attend this talk to learn about a different type of project and how to apply rational thought and practices to large scale problems.
There is no need to have an advanced knowledge of any of the above technologies and the talk will suit anyone from any discipline.

Speaker:

Sam Lambert
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/WhenToDelegate/","John Stevenson","When to own & when to delegate","Abstract:

When do you take ownership of the products and services you run and when do you delegate them, for example to cloud services.

There are many cloud services out there that provide specific devops and ops services, so what measures do you use to judge the value of using them over building your own internal process?  When your apps or services are transitory or of unknown value, how do you quantify how much effort to put into them from a busy DevOps team?

Some examples include:


When do you use a service like github over establishing your own git repository management system.
When would you use Google App Engine or Heroku over you internal server commissioning and deployment process?
Does location of services matter so long as the required performance is there?



Speaker:

John Stevenson
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/Blame/","Eric Ritchie","What's really to blame? - A day in the life of your PHP app","Abstract:

You know how to play the Blame Game when Production is broken? Probably
you have good reasons for that. Nevertheless, it's better to work out
what really went wrong - fast. See in this session how a new PHP
application can be deployed flawlessly, scaling up and down and can be
managed automatically. Discover how Dev &amp; Ops can work together, in
concert, if the worst nightmare happens and the application breaks.

Speaker:

Eric Ritchie
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/AllOps/","Neeme Praks","User experience vs. AllOps experience","Abstract:

How often have you come across software projects where analysts spend 100% of their time on end-user requirements? In my experience, this is the typical case in most software projects.

How often have you come across software projects where analysts spend their time on end-user requirements AND also on QA-team requirements, operations-team requirements, marketing-team requirements and other stakeholder requirements? In my experience, not that often.

In this talk I present most common patterns and anti-patterns from personal experience are useful for the DevOps crowd:


Ops UX: application configuration file formats (XML, key=value, INI, etc)
Ops UX: CLI vs. GUI
Ops UX: monitoring application health
Ops UX: ease of install, ease of upgrade
QA UX: typical options that should be configurable so the system is testable in days instead of years



Speaker:

Neeme Praks
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/The evolution of monitoring at Prezi/","Gabor Veszi","The evolution of monitoring at Prezi","Abstract:

Through the story of our monitoring system I&rsquo;d like talk about culture.
Last year we doubled our active user count. As more users mean more
responsibility, we had to concentrate on improving availability while
simultaneously scaling our backend. One important component of this
process is improvements in our monitoring system. I&rsquo;d like to show how
a good monitoring system enables happy and effective component owners.

Originally we had the traditional, entirely separate Dev and Ops
silos: we contracted with a company that was responsible for
operations, and they used their own monitoring system. We added our
own application metrics to this system, and when they received an
alert they tried to solve the issue. As you can imagine, this
arrangement had some problems. We have since got rid of these silos,
bringing our ops in house, and are now much happier.

In this talk I'd like to present what we did to improve our monitoring
situation in small steps: we created our own monitoring system that
makes it trivial for developers to add checks of our complex system.
We introduced the concept of component ownership, and even though our
developers must be woken up for some alerts at night, everyone is more
satisfied than before.
The talk will go into detail about the system itself as well as the
social aspects of the arrangement.

Speakers:

Gabor Veszi
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/TheDeliverator/","Sebastien Cevey","The Deliverator: a dashboard to tell you why code is not live yet","Abstract:

Software development goes through a series of stages, from code being
written &amp; reviews, to building and deployment, testing both automated
and by QAs, until the final release.

Typically, each step is managed by a separate service. At the
Guardian, we manage stories in Pivotal Tracker. We commit code in Git
and push it to Github, where we use pull requests to review and sign
off code. TeamCity runs tests and builds deployable artifacts. Our
RiffRaff system deploys those artifacts to the different pre-prod
environments, where they can be QA'd before they are released to the
production environment.

While it is a good habit for services to do one thing and do it really
well, it also means that the state of a piece of code (generally, a
branch in Git) is scattered, and it becomes unusually hard to answer
some simple questions such as:


Does a feature build successfully? Has it been code reviewed? Has it
been QA'd?
What branch is deployed on each of the environments? Is it the latest build?
What changes are about to be released?
What changes have been released last?



Or more generally, why is code not live yet?

The Deliverator is a dashboard we use to provide immediate and
up-to-date information on all the code under development. Rather than
enforcing a fixed workflow, it displays the build and review states as
simple indicators, fetched from the different services involved. It
also shows what feature is deployed to each environment, and allows
updating or deploying a new feature anywhere in a single click.

Speaker:

Sebastien Cevey
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/StartupOps/","David Mytton","StartOps: Growing an ops team from 1 founder","Abstract:

Description: Bootstrapped startups don't have the luxury of a full team of ops engineers available to respond to issues 24/7, so how can you survive on your own? This talk will tell the story of how to run your infrastructure as a single founder through to growing that into a team of on call engineers. It will include some interesting war stories as well as tips and suggestions for how to run ops at a startup.

Speaker:

David Mytton
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/SmartLogging/","Neil Avery and Andrew Coates","Sportingbet: Smart Logging for Better Monitoring","Abstract:

Logging has traditionally been a third-class citizen in most organisations. In many cases, if software teams think about monitoring and logging at all, it is often well after they&rsquo;ve written tests and code, and sometimes even after their software has been deployed to production.

But at companies like Sportingbet, DevOps is now opening peoples&rsquo; eyes to the possibilities of better monitoring and better dashboards. There are of course many new tools available to help with this, but they are decidedly limited by the richness of the data that is fed to them. It&rsquo;s now relatively easy to correlate structured and unstructured data to get real-time visibility of system activity. Now it&rsquo;s time to make sure the right data is actually there. Enter: smart logging.

Done smartly, logging can provide complete end-to-end traceability of transactions through a system. It can improve uptimes by making it easier to troubleshoot when things go wrong. It can reveal performance bottlenecks and help make continuous improvements over time. And it can speed up development by reducing the effort required to test and debug issues.

But: &ldquo;What to log?&rdquo;, &ldquo;How to log?&rdquo;, &ldquo;When to log?&rdquo;  These are the questions. In this talk, we&rsquo;ll share our experience of building monitorable high-performance grid systems, where smart logging is a requirement, because otherwise it&rsquo;s just too painful when things go wrong. We&rsquo;ll also explore patterns and practices for baking smart logging into the software development process, the team, and the organisation. And we&rsquo;ll share how this has been applied at Sportingbet, along with some of their pain points. We&rsquo;ll also show how all of this can lead to more meaningful dashboards to monitor and optimise your systems.

Speaker:

Neil Avery (Logscape) Andrew Coates (Sportingbet)
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/SoftwareEnvironmentsManagement/","Subhendu Mohapatra","Software Environments Management - Providing stable platforms for delivering changes","Abstract:

Agile software development practices, combined with an exponential
increase in the complexity of applications to be delivered have raised
the bar for stable software environments.

Software environments provide the platform for ensuring applications are
successfully tested and released.

In appropriate management of environments increases the risk of
providing test environments that are not a true reflection of the
production environment and risk compromising on the quality of testing.

Working in a  IT and Management consultancy, I have worked with numerous
clients and have often seen issues, which highlights the fact that test
environments are not always a true reflection of live.  But this has not
stopped us from releasing the code to live and when things go wrong (As
it so often happens), we realize that we didn&rsquo;t do things right.

Whilst working in their own silos, dev teams work in churning code, QA
team test in a test environment, there is a clear gap wherein how do you
ensure that what is being delivered for live deployment, is tested in a
right platform?

Leading a DevOps team, I have regularly come across environments issues
being highlighted by various teams. In addition to environment issues,
there is a huge proliferation of tests environments. Whether you use
test environments in your local data centre or use virtual machines
spawned across cloud service providers, there is cost associated with
these. How do you manage the costs and overhead?

My talk highlights the importance of Environments Management. I will
introduce the concepts of environments and how it relates to various
teams (dev / qa / operations). I will walk through a suggested approach
(process, tools, dashboards)that can help organizations realize some key
benefits (such as -  delivering changes that have been tested on the
right platform, visibility of environments and their usage, etc.) and
will foster confidence across teams.

Key take-aways:


Introduce the concept of environments and how it relates to &ndash; dev / qa / operations and business.
Highlight the importance of stable environments.
Walk through an approach (&ldquo;Environments Management Process&rdquo;) for identification, planning and managing environments.
Provide suggested mechanisms for sharing information and
building confidence across teams.



Speaker:

Subhendu Mohapatra
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/SpeedOfAgile/","Julian Fish","Release management at the speed of agile","Abstract:

Release management happens once software has gone through the process of development and testing. However, as teams move over to agile, they begin put through more software releases as they change from long development phases to shorter sprints that track against the business requirements more closely. More releases means more change in production. The DevOps movement is familiar with this, and working to change the situation.

There are three areas where discussion and integration can take place, and that is what this talk will go through, based on experience of enterprise software organisations and deployments of release management and automation.

Theme 1 - Automation

Automating release management should solve a lot of the problems that exist for DevOps teams. And it will do. But it is not the only step that has to be thought about. Release automation is the technical step that has to be achieved, but there are two other areas that also have to be considered.

Once releases are automated, putting a calendar for release scheduling in place is a really good idea. Agile teams don't work in isolation, but they do have to think about dependencies and when releases are switched into production after testing. This is a simple step that makes the automation process deliver the goods. In enterprise environments, I have found that this calendaring can be difficult as teams are more spread out and dispersed, so having on version of the truth really helps.

Secondly, putting releases into a framework and history is a necessary step as well. Larger organisations will want this for their own audit and control purposes, while it is still worth having for smaller organisations as it helps with tracking problems. After all, those who don't know their history are doomed to repeat it.

Theme 2 - Process

Getting release automation in place does not happen by magic. It does take time and collaboration across teams. What can be valuable for everyone involved in this is the establishment of baseline processes that should be followed during each release. Steps within these processes can then be automated as well, rather than relying on human action that can bring in errors. This can also help when judging the appropriate process for releases - not all will require the same level of rigour as others, if they don't touch on core systems or don't have dependencies that could lead to issues.

There are also steps that organisations can take around role splits - ensuring that people can't put their own software into production without the appropriate testing or release approval for example. The balance point is that these steps should bot get in the way of release management and automation, but that they help it get completed quicker by proving that work is good.

Theme 3 - Continuous

The move to continuous deployment and continuous delivery fits really well with release automation. However, how each of these steps is then linked together can be more interesting. With some of the eneterprises I have been working with, we have established the concept of the 'trust line' - that is, how far along the process can something be automated between development and production.

For smaller or non-critical releases, steps around testing may be fully automated and if they are passed, releases can be put in automatically. for critical projects, the UAT and testing phase may remain manual. Each release should be judged according to its potential impact, and how much value it can offer by getting into production faster.

Then a quick note about rework. One of the big pain points in the enterprise is the amount of rework that is taking place around projects. Getting the right approach in place around release management can free up time spent on manually managing deployments, and that time can instead be spent on making sure that code is better in the first place. Automation of releases should sit alongside more traceability of code - this means being able to point to good work and bad. Taking some of the timescale pressure that implementation and release can lead to and instead focusing on getting stuff right first time is therefore a strong secondary benefit.

Speaker:

Julian Fish
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/KnowMyPlace/","Julian Fish","Release management and IT support? I know my place","Abstract:

There is a famous Two Ronnies sketch on class: http://www.youtube.com/watch?v=mURhNIjc-Kw

This presentation follows on from that. There are two groups of three classes that are developing around DevOps:

Dev - Release - Ops is a split of the classic DevOps phrase and assigns release its own group. thinking in this way is important, as it stops the emphasis being on straight collaboration across the divide and puts more emphasis back on the processes and results that teams are trying to achieve. It also stops some of the politics that can arise when you split things into two camps. By having DevRelOps, the release management team can be looked at and its own requirements considered separately from those of Dev and Ops.

Dev - Ops - Support is a new distinction. As agile gets taken up by more teams and the value moves from being dev-led to DevOps, there is an impact starting to be felt at the support and service desk level. this comes in two forms:


Support has to be aware of more releases coming through, what they are supposed to deliver, and where the potential for problems might arise.
Support (often based on ITIL frameworks) has its own problems with what might be termed waterfall if it was taking place in the development side - strict processes that don't respect the needs of the end-user, problems with process, gaps where errors can creep in. Taking the DevOps model and trying to apply this into the support / service desk side can therefore be a good opportunity .



This can also help at the beginning of the development phase as well - better understanding of new requirements coming into IT can ensure that new projects are understood on both the dev and IT support side. If a problem comes up that needs both IT support and Dev / Ops to collaborate as well, this understanding should be in from the start.

The difference between movements in tech and IT can be vast, even when they have the same ends. The aim of ITIL is better service delivery through more targeted use of resources, while the aim of agile and devops is ultimately ... better service delivery, enabled through more appropriate use of resources and more targeted development of software. What stands between them is the perception of what is flexible and what is not.

Speaker:

Julian Fish
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/MonitoringSucks/","Adam Horwich","Monitoring Still Kinda Sucks","Abstract:

The biggest problems with monitoring services come from how selfish they are with data, and how they feel responsible for achieving all the things. A really useful monitoring service is one which allows us to visualise state and metrics. Modern tools are catching onto this though, and, with the right collaboration of components, your monitoring services can start building their own dashboards and form the hub of a much more accessible set of metrics.

I'll be talking about how and why we've transitioned away from old technologies like Naiogs, building a new service comprising of Sensu, Nimrod, Graphite and Tasseo. I'll be covering the dream, the reality, and the path to building a metrics led monitoring service. This talk will be useful for those feeling stuck with poor (or 'enterprise') monitoring solutions, or using disparate, disconnected services to achieve metrics and monitoring. With our new monitoring service, we've been able to graph, monitor, and alert on new deploys in realtime to evaluate the success and impact of new code.

Speaker:

Adam Horwich
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/MaximizingFlow/","Gene Kim","Lessons Learned From Manufacturing For Maximizing Flow From Dev To Ops","Abstract:

The theories presented by Dr. Eliyahu Goldratt in &ldquo;The Goal: The Goal: A Process of Ongoing Improvement&rdquo; revolutionized manufacturing management.  Goldratt is now credited for being one of the three founders of the modern manufacturing movement -- the others being Dr. Edward Deming and the combination of the Toyota Production System and Lean.

Similarly, Reinersten&rsquo;s pioneering work in &ldquo;Principles Of Product Development Flow&rdquo; described how reducing batch sizes in the Development value stream helped define the concepts that enabled the continuous integration and deployment bodies of knowledge, which is considered to be a prerequisite for the patterns associated with DevOps.

However, Reinersten&rsquo;s model is not sufficient to fully describe IT Operations, where the value streams are far more numerous and complex (e.g., incidents, service requests, multiple deployment streams, etc).  In order to build reliable schedules and manage flow, these other value streams must be integrated and managed.

In this talk, I will propose how using manufacturing plant floor metaphors of bill of resources, work centers, and production schedules can help maximize the flow across multiple DevOps flows of work, often constrained by deployment, testing, and ideally, the business.

I will describe how these underpinning metaphors and principles affected the 'The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win,' as well as the upcoming &ldquo;DevOps Cookbook.&rdquo;

Speaker:

Gene Kim is a multiple award winning CTO, researcher and author.  He was founder and CTO of Tripwire for 13 years. He has written three books, including &ldquo;The Visible Ops Handbook&rdquo; and &ldquo;The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win.'  Gene is a huge fan of IT operations, and how it can enable developers to maximize throughput of features from &ldquo;code complete&rdquo; to &ldquo;in production,&rdquo; without causing chaos and disruption to the IT environment.  He has worked with some of the top Internet companies on improving deployment flow and increasing the rigor around IT operational processes. In 2007, ComputerWorld added Gene to the &ldquo;40 Innovative IT People Under The Age Of 40&rdquo; list, and was given the Outstanding Alumnus Award by the Department of Computer Sciences at Purdue University for achievement and leadership in the profession.
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/JavaApplications/","Neeme Praks","Java applications in DevOps world","Abstract:

If you have the background of &ldquo;dynamic&rdquo; languages, you might think, &ldquo;what is all that fuss about developing and updating those applications running on JVM?&rdquo;
In this talk, I will give a quick overview of:


why are Java application updates harder than updates with some other technologies (e.g. PHP)
how does that affect developer productivity (it does!)
some solutions for overcoming these issues in development and production (e.g. rolling restart)
different approaches to externalizing environment-specific configuration from your Java application



So, if you ever struggled maintaining Java-based applications and were not sure how to solve those issues - this talk is for you. And, even if you have not yet come across such applications, you might in the future - the Java-ecosystem is growing!

Speaker:

Neeme Praks
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/IslandLife/","Wes Mason","Island Life: How we built and deployed the Honshū way","Abstract:

Honsh&#363;, or Honshuu, is the largest island of Japan.
It is also the codename for the complete rewrite of Server Density that has been over a year in the making.
At the heart of Honshuu is the idea that every service is an island. Any island can talk to another, using strict traditions and customs, and almost any island can communicate freely with the wider world via intermediaries and guardians of custom.
Every island is the main land, looking after it's own concerns, only caring that other islands can communicate with it, but not what they're doing over there.

This process has represented not just a technological rewrite, but a cultural shift,  knowing when to spin out a new 'island' and making sure it can be communicated with in the same fashion as it's neighbours.

In summary:


Everything over HTTP: statuses, events via webhooks
A fully defined common HTTP API allowing free communication.
A middleware service designed for communication only with the right services and account permissions between the JavaScript fronted and backend services.
Technical concerns such as blocking HTTP calls, integration testing with a bajillion buildable components, and various build systems across PHP, Python and Node.js services carefully crafted to have common build entrypoints and encapsulated concerns.



Speaker:

Wes Mason
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/ReleasingSoftwareAtGovUk/","Kushal Pisavadia","How we release software for GOV.UK","Abstract:

GOV.UK is the new digital home of the British Government.

In the first week of GOV.UK being released, code was deployed to production 74 times. And for the last five months alone the release process for operations has gone through large changes.

In this talk I'm going to provide some background on GOV.UK and GDS, describe the different release processes we've gone through, explain how we've enabled an open and accountable release process, and detail some of the wins/pitfalls along the way.

Specifically, these include:


How we optimised for moving fast
How we restructured, aiming for stability of the platform; and
How we've come to our current release process



There will, of course, be a description of our technical infrastructure and tools. However, the biggest discussion point will be how we're trying to deliver high quality public services, quickly, with the multidisciplinary teams we have.

Speaker:

Kushal Pisavadia
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/SchemalessDatabases/","Simon Vans-Colina","How schemaless databases fit into the continuous delivery world","Abstract:

Covering the following ideas.


Continuous delivery is good.
Schema migrations are hard.
Schemaless databases don't have this problem.
Fact and Object storage should be a cross cutting concern like source control or configuration management
How to make schemaless databases play nicely with the declarative tool world. (chef, puppet vs fabric)



My experience is drawn from 2 years in the devops infrastructure team at Maersk, and more recently 6 months at Basho helping customer integrate Riak into their platforms.

Speaker:

Simon Vans-Colina
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/ReducingReleaseTimes/","Juan Breinlinger","How do you get releases down to 12 minutes at 12-years-old lastminute.com?","Abstract:

Starting devops from scratch in a startup may be a breeze compared to transforming one of the world's classic dotcom companies saddled with a 12-year-old architecture. Imagine being faced with operations versus development teams, SVN/Perforce/CVS deploys, code copy-and-paste processes, manual configurations and, to make it even more fun, teams across different regions.

But at the same time everyone wants confident software deployments, improved availability, low cost solutions and a good working environment.

What can we do to make that happen? There is no single easy answer.

At lastminute.com we had to change the way we worked at multiple layers. We started with our mobile website and have been extending it organically across interconnected applications and processes. For greenfield development, the process is relatively easy to plan. However, for the majority of systems in such a mature enterprise you are faced with a far greater challenge: transforming applications and processes that are already weighed down with obstacles to automation.

We learned that the key ingredient for this transformation is collaboration. There is also a particular rhythm to expanding continuous delivery system by system in an 'island hopping' strategy. We feed off the learnings, momentum, and success of each system to build confidence and convince stakeholders to invest in transforming related systems.

As part of the talk I will illustrate the technical details and toolsets behind our process. I will walk through an application build, starting when a developer submits a single line of code through to the application ending reliably deployed in production.

Speaker:

Juan Breinlinger
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/BusinessTransformation/","George Moberly","DevOps+Agile=Business Transformation","Abstract:

The new world order of business is increasingly centered on the speed in
which an organization can leverage digital commerce to rapidly deliver
goods and services to consumers.  This movement was ignited by the
success of companies such as Amazon and Google &ndash; who are disrupting
traditional businesses by serving consumers better and faster with
innovative technology.

To move at this kind of speed, businesses must transform.  This means IT
needs to be a front office strategic imperative to business and not the
back office support system for internal operations. The reality today is
that separation between Dev and Ops in large organizations still reigns
supreme. We all know this has to change.

In the Ops world many of us seeDevOps as the future.  Our developer
brethren think about Agile development practices and moving from
multi-month (or year!) development cycles to short sprints.  We are all
really talking about the same thing.  Breaking down organizational
boundary&rsquo;s and  integrating teams to move faster.  Then integrating tool
chains so that we have common tooling and don&rsquo;t need to hand off
artifacts (see CODE!) and continuously delivering innovation for the
business.  There is a process for making this transition and that we
here at Opscode have seen in practice.  George Moberly will talk about
the 5 key drivers of success in making that transition.

Warning - business transformation is not for the light of heart!

Speaker:

George Moberly
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/DifferentPlatforms/","Sam Eaton","DevOps in the Hell of a Thousand Different Platforms","Abstract:

Most of the patterns and tools commonly suggested for adopting DevOps in your company are based on the assumption that you basically have a single platform/website. What do you do when you have the polar opposite?

At Future, we develop and run over a hundred different sites, ranging from small magazine support sites in WordPress, all the way through to high traffic, bespoke sites like TechRadar.com. They&rsquo;re all written in different languages and platforms and have very different groups of developers with very different approaches and ideas, who&rsquo;re based in several cities and countries.

This talk will detail how we introduced DevOps practices at Future: with the starting point of a chasm between Development and Operations, and entirely manual processes, we were able to introduce processes, team structures and tools that were flexible enough to fit the needs of our many different platforms and teams; increasing efficiency and reliability whilst keeping up with the commercial demands of the sites, which required more than 250 deploys a month before any automation.

The key to the successful transition was a &lsquo;bottom-up&rsquo; approach, making incremental improvements to individual sites and changing how teams worked together and communicated, demonstrating the value to management at each stage and ensuring that commercial work was never delayed. This lead to a toolbox of useful systems and services that developers and operations engineers were able to use together to build appropriate workflows and processes for each different platform, but more importantly, a set of successful models for how to sell the values of this approach to each site.

After seeing how successfully this approach has worked for our websites, we have begun to introduce it into our traditional enterprise IT development. The mistakes, pitfalls and successes we have encountered along the way will be covered in detail, with a particular emphasis on in finding ways to get management and non-technical staff buy-in across the entire company.

Speaker:

Sam Eaton
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/BusinessPerspective/","Anko Tijman","DevOps from a business perspective","Abstract:

Many times DevOps is viewed from a technical, system operations point of view. But if DevOps as a movement wants to live up to its promises (&ldquo;Helping finish what Agile development has started&rdquo;) than just that point of view will not do. We need to think bigger! Our points of view:


If we really want to change the way organisations as a whole (!) work, business and IT-development and IT-Operations need to be aligned;
There needs to be strong collaboration between business and IT, through unified end-to-end processes without barriers;
The main trigger for any activity performed by IT should be business value. Any process should take this as a starting and end point;
Since implementing DevOps is all about change management, a complete view on the organization should be taken into account.



Based on several DevOps projects at client sites, we have developed a holistic view on DevOps. In this we&rsquo;ve mashed up Lean, Agile and DevOps principles and practices. Applying these principles and practices will result in an organization that is fully supported by valued IT-solutions. Key principles are:


Strong alignment between business and IT through Lean and Agile principles, such as Value Stream Mapping and Impact Mapping;
One process based on Scrum for any IT-activity, whether it&rsquo;s development or maintenance, project or support related;
Business value is the starting point for any activity;
Strong technological backbone, based on continuous integration, continuous automated testing and continuous deployments.



Our implementations focus on 7 different aspects of organizations: People, Strategy &amp; Policy, Management, Finance, Quality, Process and Organisation (based upon McKinsey&rsquo;s 7S framework). Our customers have responded enthusiastic on this new view on DevOps that includes business departments, IT-development and IT-operations and that takes away any organizational or technical impediment on creating valuable IT.

Speaker:

Anko Tijman is Thoughtleader and Management Consultant on Agile software development at Ordina (www.ordina.nl). His first Agile project dates from 2001. He has written two books on Agile testing (both in Dutch). He was speaker at Eurostar, Agile2005 and the AgileTestingDays. He is licensed trainer for Management 3.0. As of 2012, he is focusing on the organizational aspects of working more client- and result focused.
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/DevopsForDinosaurs/","Niek Bartholomeus","DevOps For Dinosaurs - My experience in introducing a DevOps culture in a traditional enterprise","Abstract:

I have worked the last 5 years as the responsible of the development community of a financial institution. My role was to take care of all cross-functional stuff like the administration of the version control tools, build and deployment automation, defining the configuration management process, etc.

In this presentation I want to give the audience an insight into why the delivery of software got increasingly hampered by a lack of proper configuration and release management and the steps we have taken to solve (or better: control) this problem:

Until about two years ago configuration and release management had always remained mostly a manual and labor-intensive activity that was known to be one of the most challenging steps in the whole process of building and delivering their software. Due to the steady growth of the development community and the increasing complexity of technologies the problems surrounding these two activities grew exponentially over time causing a major bottleneck in the delivery of software. At one point it became clear to me that we had to solve this problem by doing what we are good at: automation. Not for the business this time but for ourselves: the IT department.

The project focused on two levels:


a process level: getting a mutual agreement between all teams on the global software delivery process to be used within the company
a tooling level: the implementation of a software repository and a configuration&amp;release management tool to support the release management team rather than to replace them



But with the new process and tooling also the culture had to be adapted. This part involves changing the people's habits and is usually the most difficult and time-consuming part of the work. But these temporary frictions were dwarfed by the tremendous gains we received by the automation: less manual work, simplified processes, better visibility, trustworthy metrics, etc.

In addition to explaining these above-mentioned first steps in introducing DevOps in a traditional enterprise I also want to make the comparison with how software delivery and DevOps is done in modern web 2.0 companies: automating (almost) everything and delivering continuously. Main question is whether the enterprises should use the same patterns as these newcomers or follow their own way.

For more information please see my blog post: http://niek.bartholomeus.be/2013/01/28/introducing-a-devops-culture-in-a-traditional-enterprise/

Speaker:

Niek Bartholomeus
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/SellingDevops/","Subhendu Mohapatra","DevOps - Journey towards Selling the concept of DevOps","Abstract:

DevOps has been the buzz word for a while. But large businesses and
clients with whom, I have worked with, do not understand or realize the
importance of DevOps.

We have numerous delivery teams and everyone works in their own silos.
This does not mean that we are not delivering changes but in a way it
highlights that we are not sharing information and we are re-inventing
the wheel many times.

We start every engagement from scratch and the re-invent the wheel, or
else adopt ourselves with the process and tools used within the client
engagement.

Having worked doing DevOps activities over the last number of years, I
realize that we don&rsquo;t have a core DevOps competency within my
organization. I have also realized that many of our competitors (in the
IT Consultancy domain) also do not have a DevOps service.  This does not
mean that we all are not delivering changes, but maybe we all have not
realized the importance of it.

Over the last one year, I have worked with my organization to help
create DevOps as a core competency. In my presentation, I will talk
about the key challenges in selling DevOps to a business. I will walk
through the process which we have used to start enabling DevOps service
and creating long term and short term goals.

In addition to the above, I have been working over the last year
engaging with numerous clients and generating the community of DevOps in
Ireland. We have a DevOps Ireland LinkedIn group, which has been
scouting for volunteers to share stories and experiences.  I will
highlight some of the key challenges I have come across such as,
creating awareness of DevOps in Ireland.

Speaker:

Subhendu Mohapatra
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/Deployment/","Phil Wills","Deployment: More than just the click of a button","Abstract:

Product teams being responsible for deployment is one of the most visible manifestations of the blurring of the development/operations boundary.  Making those who are changing software responsible for whether or not it's released to production can have a profound effect on the way they consider what constitutes done.

Moving the many existing Guardian applications, based on a wide mixture of technologies and running on a range of in-house and cloud infrastructure has been a long process, technically and socially.

This talk will cover


the cultural and technical changes we made to enable the transition, such as improving monitoring and making it visible to product teams
the changing responsibilities between the various roles in the team
the evolution of our approach to how deploys happen
why we made our own single-click deployment wheel; Riff Raff (https://github.com/guardian/deploy) and how it's been used and abused



Speaker:

Phil Wills
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/TraditionalEnterprise/","Thomas Falkenberg","DEVOPS and the traditional enterprise IT  - Opposites and the best of two worlds","Abstract:

PAYBACK GmbH operates Germany's biggest bonus programme PAYBACK, which has continued to attract increasing numbers of members and partner companies since it was started in the year 2000. The tremendous success story is continuing not only in Germany, but also in Poland, India and Mexico. Currently we are planning the rollout the PAYBACK Program in different other countries, e.g. Italy, France, Brazil and USA. PAYBACK sends out 85 million direct mailings, 350 million e-mail newsletters, 5 billion coupons distributed (1,4 printed, 3,6 digital) a year in Germany alone and its brand is represented in 36.000 partner stores. As a result, the programme is the largest multichannel-communications platform in Germany.

PAYBACK was acquired by American Express two years ago, therefore we are have ongoing internal challenges like the merger with AMEX. Furthermore, there are recent developments like rapid internationalisation, new partners, new channels like social media and mobile apps. We experience a growing complexity and size of our IT landscape with the demand for  shorter release cycles and for new features while maintaining a high quality, performance and stability at the same time. Inspired by the DevOps movement and our first DevOpsDays 2011 in Goteborg we introduced a number of new ideas and tools which helped us to improve the delivery process and narrow the gap between Dev, Ops and QA. But during this transformation we realized that some of the ideas and tools that are spread by the DevOps community were either too simplified for us or we were not able to use them because of habits or constraints we have build up in the last 12 years.

In this talk we would like to share the experiences we've gathered during the last 2 years regarding our DevOps efforts. We are right in the middle of a transformation which we think is vital to our company. It turned out to be much harder and more time consuming than we thought at the beginning. We will talk about the issues with different data center providers with different processes and non trivial deployments for 14 applications across three-tiers in an Oracle-centric landscape and multiple servers plus configuration and database changes, challenges with ten globally distributed development teams, and of course, a cultural gap especially between Dev and Ops: different mentalities, responsibilities and levels of know how.

What we have learnt? A lot! And we would like to share it with you.

Speaker:

Thomas Falkenberg
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/DevopsTeam/","Cosimo Streppone","Configuration Management and Devops Team at Opera Software","Abstract:

I'm Cosimo, I've been working for Opera Software in Norway for 5 years now. I led the team that made configuration management a reality at Opera across projects, teams and now departments.

I've long wanted to assemble a presentation to share the story of how that happened, both culturally and technically. Depending on what you guys are looking for, I think the presentation could be pushed towards either aspect.

Reasons why I think this is interesting:


The cultural aspect was by far the most important and I'm going to try to convey that. We (re)started up ConfMgmt after Opera sysadmins had given up using CfEngine a couple of years before. Reliability, ease and speed of adoption and finally traction were critical factors right from the start.
Config Management is just a small part of what it takes. We have built a set of tools and conventions to make people's life easier at all levels.
Yes we have formed a DevOps team, but... it wasn't an Ops team fixing Dev problems. We built tools to empower devs and ops and make our life easier. And our team was actually made of mostly developers, so it's a 'hybrid approach' :)
Opera has ~700 employees. Our WebDev/Ops/Sysadmin teams count ~100 people in different parts of the world. We have our own datacenters and have been expanding in the last years.



Lots of challenges for a Webops team.

Speaker:

Cosimo Streppone
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/VitalSigns/","John Clapham and Paul Swartout","Checking DevOps’ vital signs - how healthy is your culture?","Abstract:

This talk gives an insight into how we monitored some of the key cultural aspects of DevOps; the vital signs.  We experimented within Nokia&rsquo;s Entertainment Organisation, but the signs apply regardless of size, or level of adoption. Just like dashboards for production systems and check-ups for people, monitoring of culture enables continued improvement and early warnings of ill-health.

Introduction

In 2011 John and Paul ended their talk &lsquo;DevOpsOrg &ndash; How we&rsquo;re including almost everyone&rsquo; with a concern that a new DevOps culture is a fragile thing. A year later they set out to check the health of the culture, an experiment to find out whether DevOps has brought the expected improvements, and whether desirable ways of working are growing stronger, or weaker.

Reasonings

We&rsquo;ll explain why we started to consider monitoring culture, why it was worth investing the time, and the potential insight it could bring.

Identifyings.

We&rsquo;ll run through the key improvements DevOps was expected to bring; the vital signs that indicate health.

Data-things

To measure health you need data. For each of our vital signs we will share our approach, the tools we used and the critical data points.

Findings

What were the results? We will share what we found as we examined our DevOps culture.

Learnings

We'll share the things we discovered about our health and the lessons we learned.

Concludings

What did we learn from the whole experiment?  How could we improve?  Would we recommend it to a friend?

Speaker:

John Clapham and Paul Swartout
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/CallOfDuty/","Kelly Whelan","Call of Duty: Dev Op","Abstract:

'It's no longer enough to wage war in pre-production. That's where developers have fought their conflicts time and time again--but now they need to cross battle lines and head into Production. It's a new kind of battle, one torn apart with operational complexity, agile missions and server warfare. With access to virtual platforms, monitoring weaponry, and automation tools, developers must now fight to ensure the performance and availability of mission-critical business applications. In this session we'll look at:


The production battleground of modern mission-critical apps
An overview of special weapons and agile tactics (SWAT) for DevOps
Real-life application fatalities and incidents
Lessons learned from Customers winning the Dev Ops war



Will you heed the call?'

Speaker:

Kelly Whelan
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/BeautifulBuilds/","Roy Osherove","Beautiful Builds and Build Patterns","Abstract:

In this talk Roy Osherove (Author of BeautifulBuilds.com book) will talk about common problems during an automated build process, and common patterns on solving those problems. This is still very much a work in progress, as such patterns have never been specifically articulated as such, yet I feel that this can be quite an important work that can be used and will stand the test of time. Some patterns and tricks: Shipping Skeleton, Rolling Waves of Confidence, Inversion Of Build Control,Visual Script, and more. more info at beautifulbuilds.com

Speaker:

Roy Osherove is the author of 'The Art of Unit Testing' and is currently writing his new book 'Beautiful Builds'.
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/DeploymentWithRobots/","Ole Michaelis","Automated deployments with robots","Abstract:

Continuous deployment is the high art of devops. So there are several
ways to achieve this: many use a one-click deployment tool like
&lsquo;Deployinator&rsquo;, or something self-written. This talk should give some
insights about how we at my old employer Digital Pioneers N.V. deploy
our apps controlled by an awesome chat robot named hubot (by github). It
will also show you how to simply do it the way we did it!

Speaker:

Ole Michaelis

After my traineeship at InnoGames I continued working there as a lead
developer for a big social game. Next station was Digital Pioneers N.V.
there I&rsquo;ve done a lot of high tech protoyping and DevOps working with
Symfony2, MongoDB, EC2, Scalarium, Redis, Node.js, CoffeeScript, statsd,
metrics and other cool tech stuff. After I left there I joined my
current company Jimdo, here I try to bring in my knowledge in software
quality and cloud computing.

I really love all the new technologies from NoSQL and node.js to Metrics
Driven Development and bringing cool tools and tech to my developer
colleagues. And I really really enjoy speaking at conferences, like I
did on phpunconf 2012 or TakeOff Conference 2013.
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/AgileReleaseManagement/","Subhendu Mohapatra","Agile Release Management - Fostering agility in delivering releases","Abstract:

How do you manage the traditional divide when Software Development is
&lsquo;done&rsquo; and there is a need for IT Operations to put the changes into
production? The transition is not easy from Development to Live.

Agile software development practices focus on delivering changes that
adds value to the customer. Key mantra for agile development teams
include - Delivering changes that enhance the customer satisfaction,
develop features that align well with the business, and provide faster
releases to live.

IT Operations are focussed on protecting the production environments and
they are the ones whose KPIs and SLAs are affected when things fail in
live. The IT Operations are often reluctant to introduce changes that
could potentially introduce instability and risk live.

What is it that the business really wants?
Ideally organizations would like to get features that enhance their
customer satisfaction levels and business alignment, while at the same
time they would like to reduce risks associated with putting changes to
production.

Whilst the focus for software development teams is to get faster
releases, and provide business and customers features that add value, it
is of critical importance that we do it right.

And most important of all, organizations definitely don't want to be in
the news for application failures.

Recent software glitches as seen across organizations such as RBS,
Lloyds TSB, United Airlines, Knight Capital Group, etc., were definitely
not the only victims of software issues. But in a way it highlights
certain issues that organizations need to acknowledge and resolve.

Working in a IT and Management consultancy, I have worked with numerous
public sector (government) clients helping them define and standardize
the release management process, that ensures there is traceability in
what is being delivered and at the same time ensures that development
and operations team share and understand the tools and process.

My talk highlights the importance of Release Management in light of how
it facilitates bridging the well-known divide. I will walk through the
identification and implementation of the key building blocks that helps
foster agility, improves communication and provides a platform to
deliver stable and traceable changes to live.

Key take-aways:


Importance of Release Management as a core competency within
DevOps.
Share information on patterns that cause bottle necks and
highlight the divide across teams - Dev/Qa/Operations.
Highlight key building blocks across release management, and
where it fits in the space of DevOps



Speaker:

Subhendu Mohapatra
",""
"","talk","http://devopsdays.org/events/2013-london-spring/proposals/AddingBusinessMetrics/","Deri Jones","Adding Business Metrics","Abstract:

Stephen Nelson-Smith's in his '6 Pillars of Monitoring' asked:
This might seem incredibly obvious - of course we monitor our systems
because downtime costs money. But if we really think like this, why are
so many of our systems so woefully monitored? And why are we not
monitoring business metrics alongside technical metrics?

What is it that we can do to make our metrics interesting to the
business?

Approaches that we have seen used:

Lost Sales - not the actual number - but ones based on 'Typical Week' metrics:


get the business and Devops teams to agree DevOps priorities, based on the reduction on visible measured Lost sales



Unbuyable products - products findable online but then can't be added to Basket


Is a problem that will never go away for Travel sector
Measuring and plotting it on wall-boards - to gain Business teams' interest



Plot Graphs that show Business Root Causes


eg:  '3' icon to mean 'problem in 3rd party system not ours' (e.g. a CDN partner or supplier of product images etc)



Speaker:

Deri Jones
",""
"","ignite","http://devopsdays.org/events/2013-london-spring/proposals/ThresholdVoting/","Sarah Haselbauer","Threshold Voting Workshops","Abstract:

While maintaining our development infrastructure, we regularly have to
deal with a plethora of feature and plugin wishes. Because balancing all
these different wishes, requirements and purposes is so time-consuming,
we considered how to increase our efficiency in this area. We discovered
that threshold voting workshops help to quickly and consistently examine
which features, plugins or any other sort of thing a certain group
(developers, testers, end users) really need. This ignite talk is an
introduction to this method.

Speaker:

Sarah Haselbauer
",""
"","ignite","http://devopsdays.org/events/2013-london-spring/proposals/SSDs/","Simon Vans-Colina","Benchmarking SSDs","Abstract:

I'd also like to do a 5 minute talk on benchmarking SSD and why they make such good economic sense.


Long tails cost money
Not all apps have hot keys
DRAM+DISK vs SSD
CPU/SPINDLE ratios
GRAPHS!



Speaker:

Simon Vans-Colina
",""
"","ignite","http://devopsdays.org/events/2013-london-spring/proposals/GreenerClouds/","Chris Adams","3 steps to move to greener, more resilient clouds","Abstract:

In this talk, I'll introduce the idea of 'clean cloud' computing, why it's interesting from a devops point of view as well as an sustainability point of view, and what steps you can take to move towards a futuristic zero carbon cloud computing infrastructure.

Why would it be interesting?

I gave a variant of this talk at LDNdevops, in London in January, which lead to some fascinating discussions afterwards at the event - as many of the steps you can take in ops are simple, and effective, and fit well into the devops worldview.

Given many of the organisations we work for have existing climate change goals where knowledge of this would help them meet those goals with little to no cost too.

Plus, well&hellip; it's arguably the right thing to do as responsible adults with future generations to think about, to work out how to deliver the promises of cloud computing without it costing us a habitable  climate along the way.

Speaker:

Chris Adams
",""
