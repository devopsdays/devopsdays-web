"votes","type","url","author","title","description","voter1"
"","talk","http://devopsdays.org/events/2013-paris/proposals/NoSQL/","Tugdual Grall","Why NoSQL Databases are the best for Devops?","Abstract:

Bringing Developers and Operations together helps companies to be more efficient to bring out new apps and services. Devops are using today many tools and technics to achieve continuous integration, deployment and monitoring. In this presentation will see why NoSQL databases are the best for Devops, and this for many reasons:


Schemaless/Flexible schemas allow developers to get back the control of what&rsquo;s going in the application! (Old fashion DBA most of the time do not have enough knowledge of the application to drive the data model!)
Easy Scalability and always on are key! The new database engines are built to scale easily. You can change the topology of your cluster (adding node for example), manage failures and upgrade on a running system with no impact on the running application.



This presentation will use real life use cases to show that NoSQL engine ease the deployment and monitoring of new applications, and also talk about the key things to look when you chose a solution and deploy it.

Speaker:

Tugdual Grall, Technical Evangelist, Couchbase

Tugdual 'Tug' Grall is a Technical Evangelist at Couchbase, an open source advocate and a passionate developer. He currently works with the European developer communities to ease the NoSQL adoption.  Tugdual is contributing to the Java and Node/JavaScript Couchbase SDKs.

Before joining Couchbase Tugdual was CTO of eXo the company behind the revolutionary online development tools Cloud-IDE and the open source social platform eXo Platform. Earlier Tugdual has worked as Product Manager and Developer on the Oracle Middleware focusing on Java EE platform.

Tug has spoken at number of conferences including  DevoxxFR, FOSDEM, Open Source Day Poland, Google I/O, JavaOne and many meetups and user groups. He is co-founder of the Nantes JUG (Java User Group) that holds since 2008 monthly meeting about Java ecosystem. He also writes a blog available at http://tugdualgrall.blogspot.com and available @tgrall Finally when he finds the time to do it, he develops the site http://www.resultri.com a Google App Engine based application.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/TransformerDesDevsEnDevops/","Fabrice Bernhard","Transforming devs into devops","This talk will be given in English

 English Abstract:

In the world of web development, the competence of a developer as perceived by his peers is usually more linked to his skills in system administration than his pure coding expertise. The polyvalence of the devops is indeed a quality that enables him to unblock critical situations, where a pure coder, even excellent, would be struggling.

Let us transform all the devs into devops then! It is unfortunately not that easy, since the greatest part of the polyvalence is based on experience, hard to transfer rapidly.

How can we accelerate the acquisition of experience? How can we transfer the 'scars' of the veteran sys-admin to the freshly-arrived juniors ? How can we help autodidact sysadmins adopt the devops philosophy? How can we avoid that the introduction of tools typically associated with devops culture (vagrant, chef, puppet, fabric, etc.) makes system administration become even more complex to the juniors?

These are the questions we have asked ourselves in our team, with some solutions and a few reflexion paths:
the devops folder


the homemade IAAS
the anti-magical provisioning
the sudo for all
the quality board
the pair-devopsing
the pseudo-on-call



The goal is to tackle all these subjects without prejudices and open reflexion topics that can be further discussed during the open-space sessions.

R&eacute;sum&eacute; en Fran&ccedil;ais:

Dans le monde du d&eacute;veloppement web, on constate que la valeur per&ccedil;ue d'un d&eacute;veloppeur par ses pairs est souvent plus li&eacute;e &agrave; ses comp&eacute;tences en administration syst&egrave;me qu'en ses comp&eacute;tences en d&eacute;veloppement &agrave; proprement parler. La polyvalence du devops est en effet la qualit&eacute; qui permet de d&eacute;bloquer les situations les plus difficiles, quand les autres d&eacute;veloppeurs, m&ecirc;me excellents, pataugent.

Une grande partie de cette polyvalence est bas&eacute;e sur l'exp&eacute;rience, difficile &agrave; transmettre rapidement. Comment acc&eacute;l&eacute;rer l'acquisition d'exp&eacute;rience ? Comment faire adopter la philosophie devops aux autodidactes de l'administration syst&egrave;me ? Comment &eacute;viter de remplacer la magie de la mise en production par les 'admins' en magie de la mise en production par 'le script' et impliquer les d&eacute;veloppeurs sur ces aspects ?

Voici les questions que nous avons &eacute;t&eacute; amen&eacute;s &agrave; nous poser dans notre &eacute;quipe, avec quelques solutions et encore plusieurs pistes de r&eacute;flexion :


le dossier 'devops' dans chaque projet
mise en place d'un IAAS low-cost avec LXC et Fabric
provisioning simple : fabtools VS chef-solo
vagrant
pair-deploying



Le but est d'aborder ce sujets sans pr&eacute;jug&eacute;s et ouvrir des pistes de r&eacute;flexion &agrave; approfondir en open-space

Pourquoi ?

J'aimerais que tous les devs dans l'&eacute;quipe soient des devops aguerris. Mais je me rends compte que c'est plus facile &agrave; dire qu'&agrave; faire.

D'ailleurs quand on regarde les offres de formation, on se rend compte qu'il en existe pl&eacute;thores en d&eacute;veloppement, et quasiment aucune en gestion d'infrastructure web. La transmission de l'exp&eacute;rience, des 'cicatrices' pour reprendre l'expression d'un devops lors d'un meetup, est difficile &agrave; rendre m&eacute;thodique. Et l'introduction des outils typiquement associ&eacute;s &agrave; la culture devops (vagrant, chef, puppet, fabric, etc.) ne garantit pas une mont&eacute;e en comp&eacute;tences au contraire, elle peut faire para&icirc;tre l'administration syst&egrave;me encore plus complexe pour le d&eacute;veloppeur junior. Bref sujet passionnant mais sans solution magique pour l'instant.

Speaker:

Fabrice Bernhard, Fondateur et Directeur Technique Theodo
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/ScalingDevOpsInTheEnterprise/","Rainer Heinold","Scaling DevOps in the Enterprise â€“ Best Practices and Building Blocks","Abstract:

Although DevOps is one of the hot topics for C-level executives, a lot of initiatives fail or don&rsquo;t produce value for an organization. However, the roll-out of Agile methodologies increases the pressure on development and operations to improve the ability to take new applications and features into production.

The session describes a tool-independent blueprint of a successful DevOps reference implementation in a large multi-national organization, highlighting the key factors that are necessary and how organizations can transform their infrastructure re-using the different capabilities they already have.

Speaker:

Rainer Heinold, Senior Technical Director EMEA, CollabNet, Inc.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/ReleaseManagementIgnite/","Sylvain Cailliau","Release management at the speed of agile","This talk will be given in English

Abstract:

Release management happens once software has gone through the process of development and testing. However, as teams move over to agile, they begin put through more software releases as they change from long development phases to shorter sprints that track against the business requirements more closely. More releases means more change in production. The DevOps movement is familiar with this, and working to change the situation.

There are three areas where discussion and integration can take place, and that is what this talk will go through, based on experience of enterprise software organisations and deployments of release management and automation.

Theme #1 - Automation

Automating release management should solve a lot of the problems that exist for DevOps teams. And it will do. But it is not the only step that has to be thought about. Release automation is the technical step that has to be achieved, but there are two other areas that also have to be considered.

Once releases are automated, putting a calendar for release scheduling in place is a really good idea. Agile teams don't work in isolation, but they do have to think about dependencies and when releases are switched into production after testing. This is a simple step that makes the automation process deliver the goods. In enterprise environments, I have found that this calendaring can be difficult as teams are more spread out and dispersed, so having on version of the truth really helps.

Secondly, putting releases into a framework and history is a necessary step as well. Larger organisations will want this for their own audit and control purposes, while it is still worth having for smaller organisations as it helps with tracking problems. After all, those who don't know their history are doomed to repeat it.

Theme #2 - Process

Getting release automation in place does not happen by magic. It does take time and collaboration across teams. What can be valuable for everyone involved in this is the establishment of baseline processes that should be followed during each release. Steps within these processes can then be automated as well, rather than relying on human action that can bring in errors. This can also help when judging the appropriate process for releases - not all will require the same level of rigour as others, if they don't touch on core systems or don't have dependencies that could lead to issues.

There are also steps that organisations can take around role splits - ensuring that people can't put their own software into production without the appropriate testing or release approval for example. The balance point is that these steps should bot get in the way of release management and automation, but that they help it get completed quicker by proving that work is good.

Theme #3 - Continuous

The move to continuous deployment and continuous delivery fits really well with release automation. However, how each of these steps is then linked together can be more interesting. With some of the eneterprises I have been working with, we have established the concept of the 'trust line' - that is, how far along the process can something be automated between development and production.

For smaller or non-critical releases, steps around testing may be fully automated and if they are passed, releases can be put in automatically. for critical projects, the UAT and testing phase may remain manual. Each release should be judged according to its potential impact, and how much value it can offer by getting into production faster.

Then a quick note about rework. One of the big pain points in the enterprise is the amount of rework that is taking place around projects. Getting the right approach in place around release management can free up time spent on manually managing deployments, and that time can instead be spent on making sure that code is better in the first place. Automation of releases should sit alongside more traceability of code - this means being able to point to good work and bad. Taking some of the timescale pressure that implementation and release can lead to and instead focusing on getting stuff right first time is therefore a strong secondary benefit.

Speaker:

Sylvain Cailliau, Serena Software

Sylvain Cailliau is the SERENA Technical Director for the Western Europe territory. With 26 years of experience in the Software Development industry both from the End User and the Software Editor side, he is a Specialist of Configuration Management and Development Process, he masters all the Development Life Cycle Disciplines from Requirement Management to Demand Management to Configuration Management and Build to Release Management. His main responsibility is the management of complex ALM projects from initial meeting with customers to SERENA solution deployment to follow-up process improvements (THALES, BNPP, ORANGE, VALEO are some of the customers with international scope he has been responsible for). He is ITIL certified and SCRUM Master.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/ReleaseManagement/","Sylvain Cailliau","Release management at the speed of agile","Abstract:

Release management happens once software has gone through the process of development and testing. However, as teams move over to agile, they begin put through more software releases as they change from long development phases to shorter sprints that track against the business requirements more closely. More releases means more change in production. The DevOps movement is familiar with this, and working to change the situation.

There are three areas where discussion and integration can take place, and that is what this talk will go through, based on experience of enterprise software organisations and deployments of release management and automation.

Theme #1 - Automation

Automating release management should solve a lot of the problems that exist for DevOps teams. And it will do. But it is not the only step that has to be thought about. Release automation is the technical step that has to be achieved, but there are two other areas that also have to be considered.

Once releases are automated, putting a calendar for release scheduling in place is a really good idea. Agile teams don't work in isolation, but they do have to think about dependencies and when releases are switched into production after testing. This is a simple step that makes the automation process deliver the goods. In enterprise environments, I have found that this calendaring can be difficult as teams are more spread out and dispersed, so having on version of the truth really helps.

Secondly, putting releases into a framework and history is a necessary step as well. Larger organisations will want this for their own audit and control purposes, while it is still worth having for smaller organisations as it helps with tracking problems. After all, those who don't know their history are doomed to repeat it.

Theme #2 - Process

Getting release automation in place does not happen by magic. It does take time and collaboration across teams. What can be valuable for everyone involved in this is the establishment of baseline processes that should be followed during each release. Steps within these processes can then be automated as well, rather than relying on human action that can bring in errors. This can also help when judging the appropriate process for releases - not all will require the same level of rigour as others, if they don't touch on core systems or don't have dependencies that could lead to issues.

There are also steps that organisations can take around role splits - ensuring that people can't put their own software into production without the appropriate testing or release approval for example. The balance point is that these steps should bot get in the way of release management and automation, but that they help it get completed quicker by proving that work is good.

Theme #3 - Continuous

The move to continuous deployment and continuous delivery fits really well with release automation. However, how each of these steps is then linked together can be more interesting. With some of the eneterprises I have been working with, we have established the concept of the 'trust line' - that is, how far along the process can something be automated between development and production.

For smaller or non-critical releases, steps around testing may be fully automated and if they are passed, releases can be put in automatically. for critical projects, the UAT and testing phase may remain manual. Each release should be judged according to its potential impact, and how much value it can offer by getting into production faster.

Then a quick note about rework. One of the big pain points in the enterprise is the amount of rework that is taking place around projects. Getting the right approach in place around release management can free up time spent on manually managing deployments, and that time can instead be spent on making sure that code is better in the first place. Automation of releases should sit alongside more traceability of code - this means being able to point to good work and bad. Taking some of the timescale pressure that implementation and release can lead to and instead focusing on getting stuff right first time is therefore a strong secondary benefit.

Speaker:

Sylvain Cailliau, Serena Software

Sylvain Cailliau is the SERENA Technical Director for the Western Europe territory. With 26 years of experience in the Software Development industry both from the End User and the Software Editor side, he is a Specialist of Configuration Management and Development Process, he masters all the Development Life Cycle Disciplines from Requirement Management to Demand Management to Configuration Management and Build to Release Management. His main responsibility is the management of complex ALM projects from initial meeting with customers to SERENA solution deployment to follow-up process improvements (THALES, BNPP, ORANGE, VALEO are some of the customers with international scope he has been responsible for). He is ITIL certified and SCRUM Master.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/RefonteAgileApplicationObsolete/","Fabrice Bernhard","Refonte agile d'une application obsolÃ¨te","Abstract:

Entre les d&eacute;buts du web, la sortie de Rails 1.0 en 2005, et maintenant Rails 3, Symfony2 Play2, Zend Framework2, Django 1.5 etc. beaucoup d'applications webs critiques ont &eacute;t&eacute; d&eacute;velopp&eacute;es sur des architectures improvis&eacute;es et des technologies aujourd'hui obsol&egrave;tes. Ces applications sont difficiles &agrave; faire &eacute;voluer et repr&eacute;sentent un vrai danger pour la v&eacute;locit&eacute; des entreprises qui en d&eacute;pendent.

La solution de tout jeter pour recommencer est peut-&ecirc;tre tentante pour l'&eacute;quipe de d&eacute;veloppeurs mais c'est une solution extr&ecirc;mement risqu&eacute;e en termes de continuit&eacute; de services. Pour diminuer le risque, il faut avoir une approche agile &agrave; la fois dans le d&eacute;veloppement des &eacute;volutions et dans la mise &agrave; jour de l'application en production et bien coordonner les deux aspects : il faut une approche devops.

Bas&eacute;e sur l'exp&eacute;rience de plusieurs projets, nous aborderons les 7 &eacute;tapes chronologiques de la refonte agile d'un existant associ&eacute;es &agrave; des solutions culturelles et techniques que nous avons identifi&eacute;es :


pr&eacute;vention des r&eacute;gressions
mise &agrave; jour de l'infrastructure
gestion du routing et des entr&eacute;es/sorties
partage du layout
int&eacute;gration de la session
amorcer la transition la du code vers une architecture orient&eacute;e service
migration progressive du mod&egrave;le et des donn&eacute;es



Nous verrons au passage que l'essentiel des probl&eacute;matiques rencontr&eacute;es pendant une refonte agile sont celles auxquelles s'int&eacute;resse le mouvement devops.

Pourquoi ?

Le sujet de la migration progressive de Symfony1 vers Symfony2 est un sujet sur lequel nous travaillons beaucoup chez Theodo et Allomatch. En effet dans les deux soci&eacute;t&eacute;s nous travaillons &eacute;norm&eacute;ment avec Symfony et la version 2 n'est pas juste une am&eacute;lioration mais un nouveau framework, donc pas de migration automatique possible.

Au fur et &agrave; mesure que nous avons pris du recul sur le sujet nous nous sommes rendus compte que l'ensemble des solutions que nous mettons en place sont haut-niveau et donc g&eacute;n&eacute;ralisables &agrave; n'importe quel langage ou framework. Nous nous rendons aussi compte que beaucoup des solutions que nous apportons sont culturelles et que nous introduisons sous couvert de 'solution innovante de migration progressive' tout un ensemble de bonnes pratiques devops sur les projets : monitoring business, int&eacute;gration continue, pipeline de d&eacute;ploiement automatis&eacute;, releases petites et r&eacute;guli&egrave;res, etc. D'un point de vue haut-niveau, ce que nous apportons c'est un regain de v&eacute;locit&eacute; sur des projets embourb&eacute;s, ce qui &agrave; mon avis est exactement l'objectif de la philosophie devops.

J'ai d&eacute;j&agrave; abord&eacute; notre exp&eacute;rience sur la migration progressive de Symfony1 &agrave; Symfony2 en conf&eacute;rences, je n'ai jamais eu l'occasion d'aborder le sujet d'un point de vue non Symfony et plus devops.

Speaker:

Fabrice Bernhard, Fondateur et Directeur Technique Theodo
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/ProduitOuProjet/","RÃ©my-Christophe Schermesser","Produit ou Projet ?","This talk will be given in English

Abstract:

Disclaimer: If you successfully perform your projects, this session is not for you.

In an I.T. Department projects fail (well not all of them).

On the internet, products are successful (except those who fail).

We will try to understand the major differences between a project and a product. And see how IT projects can learn from the process of making a product.

We look at the of Lean methodologies, Product Management and Lean Startup.

R&eacute;sum&eacute;:

Disclaimer : Si vous r&eacute;ussissez vos projets, cette session n'est pas pour vous.

Dans une DSI, les projets &eacute;chouent (enfin pas tous).

Sur internet, les produits r&eacute;ussissent (sauf ceux qui meurent).

Tentons de comprendre les diff&eacute;rences majeures entre projet et produit. Et voyons comment les projets informatique peuvent apprendre de la d&eacute;marche produit.

Nous regardons du c&ocirc;t&eacute; des m&eacute;thodologies Lean, Product Management et Lean Startup.

Speaker:

R&eacute;my-Christophe Schermesser, Octo Technology

R&eacute;my-Christophe is currently working at Octo Technology as a senior consultant.

He began his career in web development with a focus on quality and testing.

He subsequently developed an expertise in agile methodologies, Lean and Kanban which he had set up for different clients.

His curiosity for the problems of product development from market study to commercialization was what brought him to study Lean Startup, Product development and Customer Development.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/Our DevOps story - Chef + Rails for customer cloud control/","Steven De Coeyer / Joren De Groof","Our DevOps story: Chef + Rails for customer cloud control","Abstract:

In our hosting company, we use Chef to manage all user and web app configuration on our shared and private hosting environments. We've put this power in the hands of our end users through Sock, our control panel. What first started out as an automation tool for managing new servers, is now our core server configuration tool for us as well as our customers and their customers. Where a DirectAdmin, cPanel or Plesk failed in giving us an overhead management is where our Sock + Chef solution picked up. With Ruby Developers and Sysadmins literally at the same table, we were able to concurrently build the two sides of this story.

Our talk will show how we use Chef to continuously manage not only the servers but everything on it (accounts, webapps, ssh keys, Solr, Varnish, databases, &hellip;). We want to show how we use Chef in a dynamic way to shuffle and manage user- and web app configurations across a large pool of shared and dedicated servers.

Speaker:

Steven De Coeyer and Joren De Groof

Steven (Ops) and Joren (Dev) work at Openminds, a Belgian B2B hosting company offering custom cloud solutions.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/lpuppet/","Simon Marechal","Optimizing your Puppet workflow with fast software and strong tests","Abstract:

The 'infrastructure as code' mantra is followed by countless sysadmins around the world. The choice of words implies that practices from the development world should be adopted by sysadmins, yet one would be overjoyed to be able to implement the basics. Functionalities taken as granted for developers, such as easily debugging a configuration or writing complex tests, have currently no real equivalent in the devops world.

This talk will start by an overview of common practices developed around the Puppet tool, such as following development conventions, unit-testing modules, using vagrant setups to test changes, and using a good IDE. It will be followed by a rant about how these practices and tools are either a far cry from what is sorely needed, or in some cases entirely unusable. It will then describe a common anti-pattern that derives from these limitations.

The presentation will then switch to a long demonstration, highlighting functionalities of the language-puppet library and associated tools. The following subjects will be demonstrated:


quickly testing for syntax and semantic correctness at the catalog level: testing that syntax is OK, that all resources are properly defined, that all relationships between resources are valid, that there are no problems with the templates and that all sourced files are present
quickly getting the difference between two catalog, either between distinct servers or between two versions of the same configuration, including a demonstration of the usefulness of such a feature in template development
writing very strong tests, such as testing for interactions between nodes, arising from the use of exported resources or calls to the PuppetDB



If time permits, a few words on the important of performance in such tools will be given. The talk will then conclude with a preview of future features of the library, and a good dose of Haskell proselytism.

Speaker:

Simon Marechal

Simon Marechal has been working as an information security consultant for the private sector, and then as a security inspector for the ANSSI.

During that time, he nurtured a taste for effective and secure practices that is now put at use in his current sysadmin position.

He is now pursuing ways to achieve greater levels of effectiveness in his day to day practice, and is very fond of programming language flame wars.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/OpenstackPackagingGestion/","Julien Rabier, CÃ©dric Lecomte","Openstack : packaging et gestion de configuration","Abstract:

Nous proposons de pr&eacute;senter lors d'une session de 30min le travail r&eacute;alis&eacute; par les &eacute;quipes DevOps d'eNovance sur OpenStack au travers de deux aspects :


le packaging upstream dans Debian


Pourquoi packager ?
Pourquoi nous avons choisi de packager upstream dans le projet Debian ?


la gestion de configuration via Puppet


L'importance de l'automatisation dans le d&eacute;ploiement et la maintenance d'une solution de cloud


Le versioning &agrave; grande &eacute;chelle (maitrise et coh&eacute;rence des configurations sur N machines)
Le d&eacute;ploiement on demand (possiblit&eacute; de rajouter des machines et de les int&eacute;grer facilement)
Facilite les process d'int&eacute;gration continue


Pourquoi utiliser les modules pour Openstack de Puppetlabs et contribuer &agrave; leur &eacute;criture ?


Les gens de chez Puppetlabs (dont Dan Bode le mainteneur officiel de ces modules) savent ce qu'ils font (architecture du module, providers, &hellip;)
Les contributeurs repr&eacute;sentent les principales distributions Linux (Ubuntu, Debian, RedHat, Fedora, &hellip;)
Grande libert&eacute; dans le choix de l'architecture Openstack d&eacute;ploy&eacute;e gr&acirc;ce aux contributions des diff&eacute;rents acteurs (topologie r&eacute;seau, choix de l'hyperviseur, &hellip;)
Respect des good practices : pull requests, tests unitaires, int&eacute;gration continue
&Eacute;cosyst&egrave;me des modules puppet : RabbitMQ, MySQL, Memcached, Sysctl, Inifile, &hellip;
Contribution d'un module pour Ceilometer







Speakers:

Julien Rabier, Project Manager, eNovance

C&eacute;dric Lecomte, eNovance
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/NormalisedInstanceProvisioning/","Karanbir Singh","Normalised instance provisioning for dev, on-premise and public clouds","Abstract:

Cloud and Virtualised Infrastructure rely on machine instances as the user facing platform. However, this very machine instance is one of the hardest and trickiest resource to provision out of traditional operating systems. Being able to do so consistently across multiple vendor requirements, site requirements and environment requirements usually involves either relying on a third party built instance, a vendor purpose built  - and often slow releasing - instance or having to setup large infrastructure inhouse.

Looking to solve this problem we came up with project raindrops. This aims to resolve some of the issues and bridge the traditional deploymnet roles ( eg. kickstarts ) with cloud and virtualised infrastructure requirements ( eg. static images ); At the head of the problem space we are trying to solve is the idea that a single defition of the required machine instance should be consumeable in multiple environments like on-laptop KVM / Vmware / Vagrant as well as incloud environments like OpenStack, CloudStack, OpenNebula, Eucalyptus as well as public on-demand environments like AWS, Dell Cloud, HPCloud etc.

In this talk, I will expand on the problem space and propose some solutions, as well as demonstrate a unified ( git, web and rest ) interface to instance provisioning across multiple vendors and environments. By the end of this talk attendees should have a good understanding of how they can integrate instance building into existing CI and CD platforms, without needing the infrastructure needed to stay vendor agnostic.

Speaker:

Karanbir Singh

Karanbir Singh http://www.karan.org/
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/DeploiementAutomatique/","Benoit Moussaud","Monter une plateforme de dÃ©ploiement automatique DevOps en 30 minutes","R&eacute;sum&eacute; :

Les 'Dev' fournissent l'application et ses diff&eacute;rents composants et les 'Ops' sont en charge de l'infrastructure et de la gestion des environnements; le point de friction reste n&eacute;anmoins le d&eacute;ploiement et la configuration de l'application dans les diff&eacute;rents environnements (Dev, Test, Recette &amp; Production).

Dans cette session, sous forme de sprints d'une dizaine de minutes, je mettrai en place une solution DevOps, innovante et extensible, pour r&eacute;gler, une fois pour toute, cet &eacute;pineux probl&egrave;me.

Orateurs :

Benoit Moussaud, directeur technique, XebiaLabs

Benoit Moussaud, directeur technique de XebiaLabs pour la r&eacute;gion Europe du Sud,  a plus de 15 ans d'exp&eacute;rience sur Java Enterprise, du d&eacute;veloppement &agrave; l'architecture globale des applications d'entreprise complexes.

A l'origine de Xebia IT Architects en France, mes principaux domaines d'int&eacute;r&ecirc;ts sont l'automatisation de la construction (ancien contributeur Ant), l'int&eacute;gration continue et les strat&eacute;gies de d&eacute;ploiement associ&eacute;es afin de combler le foss&eacute; entre les &eacute;quipes Dev et Ops. J' ai &eacute;galement travaill&eacute; sur diff&eacute;rents plugins pour Deployit: Puppet, Maven, Bamboo, Jenkins.

Twitter: @bmoussaud
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/Make a SOLID Software Architecture/","Ole Michaelis / Soenke Ruempler","Make it SOLID - Software Architecture for System Administrators","Abstract:

Starting with Chef or Puppet as a System Administrator will lead you
to a problem where you are not sure what&rsquo;s the best solution of a
problem in terms of software architecture.

We will give you a brief overview of general well known and battle
tested software patterns which also applies to infrastructure
management code. We&rsquo;ll also show Antipatterns and best practices.

Speakers:

Ole Michaelis - https://twitter.com/codestars
Soenke Ruempler - https://twitter.com/s0enke
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/TerritoireCarte/","Pierre-Yves Ritschard","Le territoire et la carte: une histoire de visibilite","This talk will be given in English

Abstract:

Cette presentation adresse le domaine de la visibilite, ce que ce domaine represente pour les developeurs et administrateurs
systeme.

La premiere partie tente de definir ce qu'est la visibilite, l'idee que nous nous en faisons aujourd'hui en decrivant la facon dont elle existe dans la majorite des infrastructures, ainsi que la dissonance entre notre modele mental et la realite dans certains cas.

La seconde partie propose un jeu de bonnes pratiques, puis donne une vue d'ensemble des outils qui permettent d'ameliorer la visibilite au sein d'une infrastructure.

Pour finir une proposition d'architecture type est proposee pour permettre d'uniformiser les concepts de visibilite a travers les multiples couches d'une infrastructure.

Speaker:

Pierre-Yves Ritschard, developeur OpenBSD

Pierre-Yves, apres plusieurs postes de gestion d'operation dans des grandes structures je bascule il y a 3 ans vers des postes d'architecture de systeme distribues.

Tres implique dans le monde open-source et dans plusieurs projets a forte connotation devops, notamment riemann, pallet et collectd.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/EcartDevExploit/","GrÃ©gory Boissinot","Le grand Ã©cart entre des exigences de dÃ©veloppement modernes et des exigences d'exploitation industrielles","Abstract:

Les grands groupes industriels doivent r&eacute;guli&egrave;rement r&eacute;pondre &agrave; des probl&eacute;matiques d'int&eacute;gration pointues et satisfaire des exigences d'exploitation souvent uniques vis-&agrave;-vis des autres m&eacute;tiers et des probl&eacute;matiques de l'informatique de gestion.  Dans une majorit&eacute; des cas, ces contraintes sont satisfaites par la pr&eacute;sence de processus extr&ecirc;mement complexes et la mise en &oelig;uvre d'outils lourds et peu adapt&eacute; aux d&eacute;veloppeurs agiles r&eacute;pondant &agrave; des exigences modernes.

La satisfaction des exigences des d&eacute;veloppeurs et des exploitants n&eacute;cessite de mettre en place de nouvelles m&eacute;thodologies et de nouveaux outils, &eacute;tapes par &eacute;tapes, et capable de s'interfacer avec une partie de l'existant non changeable.

Cette pr&eacute;sentation :


d&eacute;finira une usine logicielle (build, test, ...) dans un environnement industriel
d&eacute;crira des exemples d'exigences d'exploitation tels que:


Contr&ocirc;le totale de l'environnement de build, de test et de run
Mise en place d'une tra&ccedil;abilit&eacute; de bout en bout de la chaine de build
Reproductibilit&eacute; du build sur plusieurs d&eacute;cennies (exemple de SLA 25 ans)
Mise en place d'une chaine de qualification et de tests &agrave; diff&eacute;rents niveaux avec diff&eacute;rents acteurs
Cohabitation d'exploitation de binaires issues de diff&eacute;rents langages  et stockage sur le long terme
Tra&ccedil;abilit&eacute; code source/binaire
Disponibilit&eacute; d'une overview sur les d&eacute;pendances des binaires toujours &agrave; jour
Cible de d&eacute;ploiement mais sans acc&egrave;s ou avec un acc&egrave;s restreint aux mat&eacute;riels cibles
Cr&eacute;ation de l'environnement de run simplement et abordable par un exploitant
Surveillance de l'&eacute;tat des projets en continu


d&eacute;crira les exigences des d&eacute;veloppeurs suivantes:


Utilisation de m&eacute;thodologies agiles telles que Scrum
Build incr&eacute;mental
Feedback extr&ecirc;mement rapide
Simplicit&eacute; de construction de l'environnement de d&eacute;veloppement (fetch des d&eacute;pendances, cycles de qualification de leurs livraisons, ...)
Int&eacute;gration parfaire dans leurs outils de d&eacute;veloppement
Utilisation le plus possible des outils standard issue de l'informatique de gestion


puis vous donnera des tips and tricks afin de r&eacute;pondre &agrave; ces diff&eacute;rents besoins avec des outils modernes tels que


Jenkins et son &eacute;cosyst&egrave;me de plugins
Sonar
Maven
Ant/Ivy et Gradle





Speaker:

Gr&eacute;gory Boissinot, Architecte logiciel, Zenika

J'interviens aupr&egrave;s de nombreux clients pour former, conseiller et participer &agrave; la r&eacute;alisation de frameworks et d'applications.
Contributeur Gradle, j'ai &eacute;vang&eacute;lis&eacute; l'outil &agrave; diff&eacute;rents User Group fran&ccedil;ais.
Je suis aussi un committeur actif sur Jenkins (anciennement Hudson) depuis 2008. J'ai r&eacute;alis&eacute; une quarantaine de plugins et librairies transverses dont les tr&egrave;s populaires EnvInject et xUnit plugins.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/IndustrialisationDevopsDetteTechnique/","TBD","L'industrialisation, le devops et la dette technique.","R&eacute;sum&eacute; :

L'administration syst&egrave;me va subir la m&ecirc;me &eacute;volution que le d&eacute;veloppement, et l'industrialisation de l'infrastructure est &agrave; l'administration syst&egrave;me ce que les frameworks/EDI sont au d&eacute;veloppement.
Cette analogie a ses limites, mais met en &eacute;vidence une chose: l'expertise est rare.


La dette technique explose car les ressources finies sont consid&eacute;r&eacute;es comme infinies.
Les frameworks et la loi de Moore : la face cach&eacute;e du pragmatisme.
Les hautes performances n&eacute;cessitent une expertise Dev et Ops.
Les limites de l'automatisation : faut-il encore un pilote dans l'avion ?
Ops -&gt; WebOps -&gt; DevOps : Un regard d'Ops sur les &eacute;volutions du m&eacute;tier dans l'univers du web.



Orateurs :

TBD, Oxalide
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/LAnalyseLogALaRescousse/","JÃ©rÃ´me Renard","L'analyse des logs Ã  la rescousse","Abstract:

La centralisation des logs devient un pilier majeur de la gestion d'une infrastructure. Au del&agrave; des aspects l&eacute;gaux, il devient vital de r&eacute;duire le temps de r&eacute;solution de bugs, ce qui peut &ecirc;tre fait en partie gr&acirc;ce &agrave; un acc&egrave;s commun aux logs. Via des outils de recherche et d'analyse, il est d&eacute;sormais possible d'obtenir rapidement et simplement des informations qui avant &eacute;tait difficilement accessible. Nous aborderons les principaux &eacute;cueils techniques inh&eacute;rent &agrave; la centralisation et &agrave; l'analyse des logs ainsi que les avantages li&eacute;s &agrave; ce genre de solution.

Speaker:

J&eacute;r&ocirc;me Renard, Belogik
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/JavaMonitoring/","Cyrille Le Clerc","Java monitoring in action with Graphite and jmxtrans","Abstract:

Java monitoring has long been difficult due to the pain of connecting to JMX from graphing and alerting monitoring systems. The &ldquo;Monitoring sucks&rdquo; motto really applied to Java.

Come and discover how monitoring Java applications became easy with a new generation of Open Source tools like Graphite and jmxtrans.
Discover how the self-service approach of Graphite allows Dev and Ops teams to integrate monitoring in the Continuous Delivery Pipeline to offer dashboards technical and business indicators to Run, Build and also Business actors.

The era of darkness is over, let there be light!

Speaker:

Cyrille Le Clerc, CloudBees

Cyrille is Elite Architect at CloudBees with more than 12 years of experience in Java technologies. He came to CloudBees from Xebia where he was CTO and Architect.

He was an early adopter of the &ldquo;You Build It, You run It&rdquo; model that he put in place for a number of high volume web sites. He naturally embraced the DevOps culture as well as Cloud Computing which he implements for his customers. Cyrille is very active in the Java community as a the creator of the Open Source project embedded-jmxtrans and as a speaker at conferences.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/IslandLife/","Wes Mason","Island Life: How we built and deployed the HonshÅ« way","Abstract:

Honsh&#363;, or Honshuu, is the largest island of Japan.

It is also the codename for the complete rewrite of Server Density that has been over a year in the making, embracing a service orientated architecture similar to those popularised by Amazon and Netflix.

At the heart of Honshuu is the idea that every service is an island. Any island can talk to another, using strict traditions and customs, and almost any island can communicate freely with the wider world via intermediaries and guardians of custom.

Each island is the main land, looking after it's own concerns, only caring that other islands can communicate with it, but not what goes on outside.

This is a cultural shift away from other ways of working more than technological. Knowing when to spin out a new 'island' and making sure it can be communicated with in the same fashion as it's neighbours, from common build strategies regardless of base technology, to involving ops as a guiding principle from the very first steps as to how an island should be built.

Speaker:

Wes Mason, Product Engineer @ Server Density

Open source developer, Pythonista, PHP Weekly curator, husband, father and pocket watch enthusiast.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/IntegratingDevelopmentAndOperationsInTheCloud/","StÃ©phane Goudeau","Integrating Development & Operations in the Cloud","Abstract:

Cloud Computing Technology influence on Information Technology industry makes even more compelling the need for software developers and IT operations to collaborate in the design, development and management of massively scalable applications and services. Azure platform is no exception to this rule. Of course, Azure allows to create and deploy new applications and their underlying infrastructure in minutes. But to take full advantage of the possibilities offered by this new paradigm, we have to rethink these new services models definition, deployment automation, configuration and updates management, health and performance monitoring, alert notifications, and especially the development process integration with IT operation services. All these practices and technologies are part of a Cloud DevOps approach that I propose to present during a session that show their usage in the context of a Cloud service deployed on Windows Azure platform.

Speaker:

St&eacute;phane Goudeau, Cloud Architect, Microsoft France

My name is St&eacute;phane Goudeau. I am currently working as a Cloud Architect in Microsoft France. I've been working in IT for more than 20 years. I began my career as an engineer in BULL Integration Services. I joined Microsoft as a Consultant in 1996 and since then my position in Microsoft France organization has evolved through different technical roles. I've got a deep technical expertise on Microsoft platform technologies (but not only) and architect skills on several subjects: Application Lifecycle Management, Cloud services architecture design, IT-as-a-Service private Cloud infrastructure deployment. I have also been the Technical Director of Microsoft Technical Center and have gained operation services knowledge through this experience.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/HowWeReleaseSoftwareForGOV.UK/","Kushal Pisavadia","How we release software for GOV.UK","This talk will be given in English

Abstract:

GOV.UK is the new digital home of the British Government.

In the first week of GOV.UK being released, code was deployed to production 74 times. And for the last five months alone the release process for operations has gone through large changes.

In this talk I'm going to provide some background on GOV.UK and GDS, describe the different release processes we've gone through, explain how we've enabled an open and accountable release process, and detail some of the wins/pitfalls along the way.

Specifically, these include:


How we optimised for moving fast
How we restructured, aiming for stability of the platform; and
How we've come to our current release process



There will, of course, be a description of our technical infrastructure and tools. However, the biggest discussion point will be how we're trying to deliver high quality public services, quickly, with the multidisciplinary teams we have.

The entire talk will be presented as a historical account of how we've changed as we've gained more people and how this has guided the way we work.

Speaker:

Kushal Pisavadia

Kushal is a Software Developer at Her Majesty's Government Digital Service, part of the UK Government, where he is helping build GOV.UK.

He is mainly interested in functional programming, browsers development, and simpler configuration management. Previously he has worked as a developer and/or systems administrator for agencies, startups and things in-between.

When not working, Kushal can be found uploading code to [GitHub][1] or climbing walls outdoors. He also helps organise the London Clojure User Group and the London Clojure Dojos.

Twitter: @KushalP

[1] https://github.com/KushalP
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/DevelopmentGainsThroughOps/","Florian Gilcher","How ops improved my dev","This talk will be given in English

Abstract:

Devops is there for a reason - not because its fun, but because it provides measurable benefits. But what are the benefits of a devops, from a developer perspective? I'd like to explain my experiences about expecting a more operations-focused development flow in my work environments and the benefits that the whole team reaps from it. This talk covers how to convice unwilling developers of the benefits of this approach.

Speaker:

Florian Gilcher

Florian Gilcher can call himself 'old-school Ruby programmer': when he learned Ruby, Rails was yet to be born. Today, he wandered on and is one of the core members of the Padrino frameworks, to which he frequently commits. He strongly believes that base unit of modern software development is the process.

email: florian.gilcher@asquera.de
twitter: @argorak
github: skade

Previous talks:
- 'Padrino' talk/workshop at eurucamp 2011
- 'Encoding in Ruby 1.9' at Euruko 2010
- 'Fear of adding processes' at wroclove.rb 2012 (http://www.youtube.com/watch?v=BYmHOF58bDY)
- 'A la carte please' at wroclove.rb 2013
- Lightning talks at RubyKaigi (theres a video, but I cannot navigate the japanese site where its on...), Euruko 2009 (http://blip.tv/euruko/euruko2009-first-seasson-of-lightning-talks-2610508 , minute ~25) and 2008
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/How Axway uses Native Packages to motorize its Forges chains/","Henri Gomez","How Axway uses Native Packages to motorize its Forges chains?","Abstract:

Major Linux distributions use native packages, RPM or DEB, for many years now.

With a strong support of pre-requisites, application life-cyle (install, update, removal), Native Packaging help sysadmins to carefully control applications and system lifecycle.

Native packages are perfectly suited for any applications, on premise or cloud based.
And they could be used with Puppet/Chef tooling, managing the hard part, aka componenting/packaging part, freeing our Puppet/Chef Master from complex recipes.

In 2012, Axway ECD Team started to create a rich catalog of Forge solutions like Jenkins, Artifactory, Nexus, Archiva, Jira, Confluence but also Subversion or Git to provide 'CI as service' to Dev and QA teams.

This talk will present what have been done, RPMs, Packages factory using Jenkins and ESXi, Dev/QA/Prod silos, staging/promotion and internal yum repositories for world-wide deliveries.

We'll dig into some packages to see how Dev and Ops should communicate to ensure solution will met runtime environment constraints.

After 6 months in production, this implementation story demonstrate that some good old solutions could meet recent paradigms like DevOps and both fit really nicely

Speaker:

Henri Gomez, Axway

Henri Gomez worked in the software industry for over 20 years. He worked for many sofware vendors in the fields of financials and market datafeeds, web portals and management of data flow..

It has been successively Developer, Project Manager, Software Architect, Production Manager and currently CI Architect at Axway.

He participated in several open source projects, including Apache Tomcat, JPackage, jmtrans and is still a member of the Apache Software Foundation, former Tomcat committer.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/BuildItTestItUseIt/","Eric Chaussier","DevOps : Build it, Test it, Use it","R&eacute;sum&eacute; :

La pression de la concurrence conduit les entreprises &agrave; devoir mettre les applications en production de plus en plus rapidement avec un niveau de qualit&eacute; de plus en plus &eacute;lev&eacute;.
Ceci a conduit aux m&eacute;thodes de d&eacute;veloppement agiles qui a chang&eacute; le processus de d&eacute;veloppement d&rsquo;une approche monolithique &agrave; une livraison plus fr&eacute;quente de petites releases.

Cependant, la plupart des processus d&rsquo;exploitation restent con&ccedil;ues pour g&eacute;rer un faible nombre de d&eacute;ploiement de releases. Cette diff&eacute;rence dans le rythme de livraison des versions est &agrave; l&rsquo;origine de nombreux probl&egrave;mes pour les DSI ralentissant le processus de release des applications.

DevOps est un mouvement visant a r&eacute;duire les &eacute;carts entre les &eacute;quipes de d&eacute;veloppements, de tests et de production en utilisant un ensemble de pratique et m&eacute;thode autour de la collaboration, l&rsquo;automatisation, la gouvernance et la qualit&eacute;. Venez d&eacute;couvrir l&rsquo;approche HP Software pour coordonner la collaboration DevOps et permettre de d&eacute;velopper, tester, d&eacute;ployer et op&eacute;rer plus efficacement et rapidement par une visibilit&eacute; partag&eacute;e entre tous les acteurs de la cha&icirc;ne de production des services.

La trajectoire d&rsquo;impl&eacute;mentation de cette supply chain de l&rsquo;IT est jalonn&eacute; d&rsquo;un ensemble de quicks wins et fonction de la maturit&eacute; de nos clients


 Tra&ccedil;abilit&eacute; de bout en bout de la release: liens entre les exigences, le code, les tests, le build, les anomalies
 Automation de la mise &agrave; disposition d&rsquo;environnement jusqu&rsquo;au d&eacute;ploiement de l&rsquo;application pour soutenir les activit&eacute;s de tests.
 Automatisation des campagnes de test de non r&eacute;gression.
 Am&eacute;lioration des processus de d&eacute;veloppement et de test par une meilleure prise en compte des informations sur le comportement de l&rsquo;ex&eacute;cution du service en production.



Orateurs :

Eric Chaussier, Presales Manager HP
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/CustomerOps/","Alexis Le-Quoc","CustomerOps: a culture of visibility and metrics applied to customer support","This talk will be given in English

Abstract:

When was the last time you had a great time calling Customer Support? Can't remember? You're not alone.

Customer support in technology means anything from googling around for answers on blogs, to a curt injunction to RTFM on irc, to being shoved around on an IVR and praying that the person who picks up the phone knows what they're doing. It's alienating and counter-productive.

When you run a service online, you have a number of advantages:


You (can and should) know what your users and customers are doing in real-time.
You can very easily reach out to them individually or as a group, synchronously or asynchronously, wherever they are in the world.
You can offer them a fast turnaround and a great degree of visibility into what you are doing to help them.
You can accurately measure whether you are making a difference.



So you can make your customers love you more easily than if you were selling physical goods in a store.

In this presentation I would like to present what we came up with in terms of goals, tools, metrics for customer support. Why is this relevant to you? Everybody has customers, whether internal or external. And as it happens that the customers we are serving at Datadog, are you, the devops community.

Speaker:

Alexis Le-Quoc

Co-founder and CTO of Datadog, a monitoring service (that does not suck ;).
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/ChefAndCloudify/","Uri Cohen","Building your own OpsWorks with Chef and Cloudify","Abstract:

AWS OpsWorks is a DevOps solution for managing applications of any scale or complexity on the AWS cloud. With OpsWorks you can manage your complete application lifecycle, including resource provisioning, configuration management, application deployment, software updates, monitoring, etc. However, OpsWorks is only applicable to AWS. What if you could create and manage a similar service on top of any cloud? In this session we will introduce Cloudify, a new open source PaaS framework. Cloudify takes a different approach by using recipes (as opposed to heavyweight coding and platform extension) as a means to introduce new application stacks to the PaaS layer. You can think of it as extending the recipe model of Chef to support application level concerns such as orchestration, dependency management, multi-tier and multi-host deployments, monitoring and auto-scaling. This session will introduce how Cloudify leverages Chef as a key enabler for an open PaaS framework.

Speaker:

Uri Cohen, GigaSpaces

Uri heads the Product and Developer community efforts at GigaSpaces, and is a frequent speaker at various industry events and meetups. Most recently, Uri co-organized the first DevOps conference in Israel. Uri has spoken at QCon New York, Cassandra Summit, CloudStack Collaboration Conference, QCon London, QCon San Francisco, CloudBeat and Devoxx, among others. Github: http://github.com/uric
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/AutomisationInfra/","Pierre-Yves Ritschard","Automatisation d'infrastructure, passe, present et futur","Abstract:

Cette presentation retrace l'histoire de l'automatisation d'infrastructure, de la situation initiale il y a une douzaine d'annee, a l'arrivee des premiers systemes formels de gestion de configuration.

A travers cette vue d'ensemble, l'evolution du contrat entre dev et ops est retracee en mettant en avant les compromis effectues de part et d'autre.

Un premier bilan de la situation actuelle est dresse et mets en lumiere certaines limites des outils que nous utilisons ainsi que certaines barrieres mentales qui ne sont pas encore totalement tombees.

Un pas suivant dans l'evolution de l'automatisation d'architecture est propose et mis en relation avec l'evolution des infrastructure logicielle qui sont desormais developpees.

La presentation termine un tour d'horizon rapide des outils qui tentent d'adresser ces nouveaux besoin et l'impact qu'ils ont sur le metier devops.

Speaker:

Pierre-Yves Ritschard, developeur OpenBSD

Pierre-Yves, apres plusieurs postes de gestion d'operation dans des grandes structures je bascule il y a 3 ans vers des postes d'architecture de systeme distribues.

Tres implique dans le monde open-source et dans plusieurs projets a forte connotation devops, notamment riemann, pallet et collectd.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/Decalogue/","SÃ©ven Lemesle","Application Java Ops-friendly : le dÃ©calogue","R&eacute;sum&eacute; :

&ldquo;Au commencement du SI &eacute;tait la division. Les Devs et les Ops parlaient des langues diff&eacute;rentes, les querelles &eacute;taient le quotidien. Ils grandirent en sagesse et l&rsquo;Unit&eacute; leur fut r&eacute;v&eacute;l&eacute;e. Ils fraternis&egrave;rent alors, pour b&acirc;tir quelque chose de plus grand.&rdquo; (Gen&egrave;se 1:1)

Voici, d&eacute;livr&eacute;s pour vous, les 10 commandements des applications &ldquo;Ops Friendly&rdquo;. Vous apprendrez comment rendre une application monitorable, tol&eacute;rante aux pannes, polie avec le syst&egrave;me. Vous seront r&eacute;v&eacute;l&eacute;s les myst&egrave;res de la gestion des logs et de la configuration &agrave; chaud.

Venez d&eacute;couvrir le guide des b&acirc;tisseurs de cath&eacute;drales DevOps.

Orateurs :

S&eacute;ven Lemesle, Architecte senior, Xebia

S&eacute;ven Lemesle, architecte senior chez Xebia, fort de 10 ans d'exp&eacute;rience, Ma&icirc;tre coordinateur d'architectures web &agrave; fort traffic, Grand int&eacute;grateur Nginx-Apache-Varnish, Vainqueur du performance contest Octo 2011, Committer Apache Deft, Evang&eacute;liste HTML5. Nourri par les univers Linux et Java, pratiquant DevOps par conviction.
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/2 or 3 things I learned building a monitoring service/","Alexis Le-Quoc","2 or 3 things I learned building a monitoring service","Abstract:

In 2010 3 of us started to build a product for the devops crowd, predicated on a few napkin drawings and 2 basic ideas: (a) software engineers who write software for scale, live and die by metrics and (b) these metrics come from a zillion different tools that create silos. We chose a memorable name and a cute logo and off to the races.

Fast-forward 3 years, the 3 have become 15, the product has evolved into a monitoring service and the company is gaining new customers every week without any marketing.

In these short 3 years we have had to:


find our customers (you, here) and find our focus,
scale from a single postgres instance to 5 different datastores all working in concert,
swap out parts of the backend as they become bottleneck
build X-ops into the core of the company (where X in [dev, tech, customer]),
discover a whole set of new metrics to obsess about,
learn something new every day, really.



I would like to share with you some of the lessons I have learned (sometimes the hard way) in building this monitoring service because I wish someone had done the same when I started.

Speaker:

Alexis Le-Quoc

Co-founder and CTO of Datadog, a monitoring service (that does not suck ;).
",""
"","talk","http://devopsdays.org/events/2013-paris/proposals/PublicCloud/","Cyrille Le Clerc","(Devs && Ops).toPublicCloud()","Abstract:

IaaS, PaaS ou Saas ; le Public Cloud change radicalement les r&ocirc;les et les fa&ccedil;ons de travailler des Ops mais aussi des Devs.
Si le &ldquo;as a service&rdquo; fait disparaitre de nombreuses t&acirc;ches, surtout du c&ocirc;t&eacute; des Ops, de nouveaux r&ocirc;les apparaissent et l&rsquo;accompagnement des &eacute;quipes projets &agrave; cette nouvelle libert&eacute; est essentiel.

Nous illustrerons par des cas concrets la redistribution des r&ocirc;les et responsabilit&eacute;s entre Dev, QA et Ops dans ce monde o&ugrave; encore beaucoup est &agrave; inventer.

Speaker:

Cyrille Le Clerc, CloudBees

Cyrille is Elite Architect at CloudBees with more than 12 years of experience in Java technologies. He came to CloudBees from Xebia where he was CTO and Architect.

He was an early adopter of the &ldquo;You Build It, You run It&rdquo; model that he put in place for a number of high volume web sites. He naturally embraced the DevOps culture as well as Cloud Computing which he implements for his customers. Cyrille is very active in the Java community as a the creator of the Open Source project embedded-jmxtrans and as a speaker at conferences.
",""
"","ignite","http://devopsdays.org/events/2013-paris/proposals/UnitTestingPuppetCode/","Philip Potter","Unit Testing puppet code","Abstract:

Testing tools for our configuration management tooling lags behind testing for our application code. Application testers can talk about the testing pyramid, where a large number of fast, specific, unit-level tests are at the base, supporting a much smaller number of higher-level end-to-end tests which may integrate with external components. But typically for configuration management tools, and particularly Puppet, the tooling does not allow us to write fast, unit-level tests; every test is an end-to-end test, even if it only makes unit-level assertions.

In this ignite talk, I will present fizzgig, a new library for writing unit tests in Puppet. This brings a number of benefits to testing configuration management that application tests already have: removing fixtures in preference of keeping all test data within the test; faster performance; tests which fail for a specific reason thus aiding debugging. I will give examples of puppet modules where good unit tests would have helped improve quality.

Speaker:

Philip Potter, consultant, ThoughtWorks

Philip is a consultant software developer for ThoughtWorks. Currently he is working on the GOV.UK project infrastructure team. He is also an organizer for the London Clojure Community.
",""
"","ignite","http://devopsdays.org/events/2013-paris/proposals/ReleaseManagementIgnite/","Sylvain Cailliau","Release management at the speed of agile","This talk will be given in English

Abstract:

Release management happens once software has gone through the process of development and testing. However, as teams move over to agile, they begin put through more software releases as they change from long development phases to shorter sprints that track against the business requirements more closely. More releases means more change in production. The DevOps movement is familiar with this, and working to change the situation.

There are three areas where discussion and integration can take place, and that is what this talk will go through, based on experience of enterprise software organisations and deployments of release management and automation.

Theme #1 - Automation

Automating release management should solve a lot of the problems that exist for DevOps teams. And it will do. But it is not the only step that has to be thought about. Release automation is the technical step that has to be achieved, but there are two other areas that also have to be considered.

Once releases are automated, putting a calendar for release scheduling in place is a really good idea. Agile teams don't work in isolation, but they do have to think about dependencies and when releases are switched into production after testing. This is a simple step that makes the automation process deliver the goods. In enterprise environments, I have found that this calendaring can be difficult as teams are more spread out and dispersed, so having on version of the truth really helps.

Secondly, putting releases into a framework and history is a necessary step as well. Larger organisations will want this for their own audit and control purposes, while it is still worth having for smaller organisations as it helps with tracking problems. After all, those who don't know their history are doomed to repeat it.

Theme #2 - Process

Getting release automation in place does not happen by magic. It does take time and collaboration across teams. What can be valuable for everyone involved in this is the establishment of baseline processes that should be followed during each release. Steps within these processes can then be automated as well, rather than relying on human action that can bring in errors. This can also help when judging the appropriate process for releases - not all will require the same level of rigour as others, if they don't touch on core systems or don't have dependencies that could lead to issues.

There are also steps that organisations can take around role splits - ensuring that people can't put their own software into production without the appropriate testing or release approval for example. The balance point is that these steps should bot get in the way of release management and automation, but that they help it get completed quicker by proving that work is good.

Theme #3 - Continuous

The move to continuous deployment and continuous delivery fits really well with release automation. However, how each of these steps is then linked together can be more interesting. With some of the eneterprises I have been working with, we have established the concept of the 'trust line' - that is, how far along the process can something be automated between development and production.

For smaller or non-critical releases, steps around testing may be fully automated and if they are passed, releases can be put in automatically. for critical projects, the UAT and testing phase may remain manual. Each release should be judged according to its potential impact, and how much value it can offer by getting into production faster.

Then a quick note about rework. One of the big pain points in the enterprise is the amount of rework that is taking place around projects. Getting the right approach in place around release management can free up time spent on manually managing deployments, and that time can instead be spent on making sure that code is better in the first place. Automation of releases should sit alongside more traceability of code - this means being able to point to good work and bad. Taking some of the timescale pressure that implementation and release can lead to and instead focusing on getting stuff right first time is therefore a strong secondary benefit.

Speaker:

Sylvain Cailliau, Serena Software

Sylvain Cailliau is the SERENA Technical Director for the Western Europe territory. With 26 years of experience in the Software Development industry both from the End User and the Software Editor side, he is a Specialist of Configuration Management and Development Process, he masters all the Development Life Cycle Disciplines from Requirement Management to Demand Management to Configuration Management and Build to Release Management. His main responsibility is the management of complex ALM projects from initial meeting with customers to SERENA solution deployment to follow-up process improvements (THALES, BNPP, ORANGE, VALEO are some of the customers with international scope he has been responsible for). He is ITIL certified and SCRUM Master.
",""
"","ignite","http://devopsdays.org/events/2013-paris/proposals/PerformancesPerpetuellesIgnite/","Henri Tremblay / Mikael Robert","Performances perpÃ©tuelles : Mesures et amÃ©liorations continues des performances","This talk will be given in French
Cette pr&eacute;sentation sera en Fran&ccedil;ais

Abstract:

What happened:

You have launched a new project to build a web site. The architecture was just great. One year of development is planned. Production date right before Christmas. Iterative process. Small iterations. A clear roadmap maximizing the time to market. Life is good.

One month before production, confident, you enter performance testing. A disaster. During development, response time were OK. Nothing to worry about. And you were sure the production servers were so powerful that they could solve any unexpected slowness. What a mistake! A state of emergency is declared. Work spread over the week-end and during your shortened holidays. You manage to fix the issue. It's not great, but it's alright. Post mortem: Three months late, 40% over budget and decent performances. Your end of year bonus, a bit less decent.

Now, come to see how it could have been:

Controlled performances all along the project. Going live without issues. And, most importantly, Christmas holidays in Tahiti with a Daiquiri.

R&eacute;sum&eacute;:

Comment &ccedil;a s'est pass&eacute;:

Vous avez lanc&eacute; un projet de site internet. L'architecture est magnifique. Vous vous lancez dans un an de d&eacute;veloppement. Mise en production avant No&euml;l! Approche it&eacute;rative. De courtes it&eacute;rations. Une roadmap claire vous promettant un time-to-market optimal.

Un mois avant la production, confiant, vous faites des tests de charge. Catastrophe. En d&eacute;veloppement, c'&eacute;tait raisonnablement rapide et &ccedil;a ne vous a pas inqui&eacute;t&eacute;. Vous vous &ecirc;tes dit que la puissance des machines de production va r&eacute;gler tout &ccedil;a. Erreur! Dans l'urgence, le week-end, pendant des vacances de No&euml;l &eacute;court&eacute;es, vous corrigez le tir. Bilan: trois mois de retard, 40% de d&eacute;passement de budget, performances acceptables. Votre prime de fin d'ann&eacute;e, un peu moins.

Et maintenant, venez voir comment &ccedil;a aurait pu se passer:

Performances ma&icirc;tris&eacute;es tout au long du projet. Mise en production sans soucis. Vacances de No&euml;l &agrave; Tahiti et Daiquiri.

Sceptiques? Alors venez.

Speaker:

Henri Tremblay, OCTO Technology

Henri Tremblay a &eacute;tudi&eacute; les sciences de l'informatique avec un penchant avou&eacute; pour l'algorithmie et les math&eacute;matiques. Il s'est ensuite &eacute;panoui depuis bient&ocirc;t 14 ans en concevant des logiciels, souvent financiers, en Java. Plus que tout, il aime r&eacute;soudre des probl&egrave;mes complexes et l'informatique s'av&egrave;re en &ecirc;tre particuli&egrave;rement bien nanti.

Ses centres d'int&eacute;r&ecirc;t sont l'optimisation et la productivit&eacute;. Ceux-ci &eacute;tant parfois plus li&eacute;s qu'on ne pourrait le penser. Il est maintenant architecte senior et responsable de la recherche et d&eacute;veloppement traitant de la performance et du calcul parall&egrave;le chez OCTO Technology.

Tr&egrave;s impliqu&eacute; dans le monde de l'Open Source, il remplit le r&ocirc;le de project leader au sein des projets open source EasyMock et Objenesis.

Mikael Robert, OCTO Technology

Mikael Robert est Architecte technique chez OCTO Technology qu'il a int&eacute;gr&eacute; il y a 3 ans. Il apporte une double expertise: Java et les infrastructures. Ses comp&eacute;tences le pr&eacute;dispose donc directement &agrave; travailler sur les probl&eacute;matiques de performance et sur les chantiers devops.

Il est l'un des deux g&eacute;rants de l'infrastructure d'OCTO et le responsable d'un chantier de R&amp;D orient&eacute; Devops: Software Factory 2.0.

Il a r&eacute;alis&eacute; de nombreuses missions d'optimisations des performances, dans divers secteurs dont la banque et l'assurance.
",""
"","ignite","http://devopsdays.org/events/2013-paris/proposals/Multi-levelData-drivenConfigurationManagementIgnite/","Diego Zamboni","Multi-level Data-driven Configuration Management","Abstract:

In today's world, multiple people need to understand and manage IT infrastructure. However, each player has different information needs, and needs to view the system according to different criteria and different levels of abstraction. For example, a sysadmin needs to know which versions of Apache are installed on different machines, but a web developer looking at the same system cares only that the web server is operational and with the appropriate configuration for deploying his applications. At the same time, a security and reliability engineer needs to manage where in the world the machines are located and how their distribution reduces the possibility of total system failures. And the CTO may only care about saying 'give me a datacenter' and having it work as expected.

These needs have upped the ante for configuration management tools. Modern IT people (developers, operations, architects, networking, security etc.) need tools that allow multi-level understanding and management of the systems. In this talk I will sketch some of the requirements for such a system, and explore how our existing tools need to be improved in order to effectively achieve these goals.

Speaker:

Diego Zamboni, CFEngine AS

Diego Zamboni is a computer scientist, consultant, programmer and sysadmin who works as Senior Security Advisor at CFEngine AS. He has more than 20 years of experience in system administration and security, and has worked in both the applied and theoretical sides of the computer science field. He holds a Ph.D. from Purdue University, has worked as a sysadmin at a supercomputer center, as a researcher at the IBM Zurich Research Lab, and as a consultant at HP Enterprise Services. He is also the author of 'Learning CFEngine 3', published by O'Reilly. These days, he splits his time between coming up with new security-related projects at CFEngine, nurturing the CFEngine community, coding useful CFEngine policies, and spending time with his family. He lives in Queretaro, Mexico.
",""
